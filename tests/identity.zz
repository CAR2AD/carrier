using carrier;
using carrier::identity::{
    Address,
    Identity,
    Secret,
    identity_from_str,
    identity_from_secret,
    identity_to_str,
    secret_from_str,
    secret_to_str,
    address_from_secret,
    address_to_str,
    address_from_str,
    secret_generate,
};
using err;
using <string.h>::{memcmp};
using <stdio.h>::{printf};
using <assert.h>::{assert};
using string;

fn test_identity(err::Err+et mut* e)
    where err::checked(*e)
{
    Secret mut sk = {0};
    secret_generate(e, &sk);
    if err::check(e) { return; }

    Identity mut pk = {0};
    identity_from_secret(&pk, &sk);

    char mut buf[50] = {0};
    identity_to_str(e, buf, static(len(buf)), &pk);
    if err::check(e) { return; }

    printf("%s\n", buf);

    Identity mut pk2 = {0};
    identity_from_str(e, &pk2, buf, string::strlen(buf));
    if err::check(e) { return; }

    assert(memcmp(pk.k, pk2.k, sizeof(pk.k)) == 0);

    secret_to_str(e, buf, static(len(buf)), &sk);
    if err::check(e) { return; }

    printf("%s\n", buf);

    Secret mut sk2 = {0};
    secret_from_str(e, &sk2, buf, string::strlen(buf));
    if err::check(e) { return; }

    assert(memcmp(sk.k, sk2.k, sizeof(sk.k)) == 0);
exit:
    return;
}

fn test_corrupt_identity(err::Err+et mut* e)
    where err::checked(*e)
{
    char *from = "oWVXR9hGa6QgKLGrPaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";

    Secret mut sk = {0};
    secret_from_str(e, &sk, from, static(len(from)));
    if !err::check(e) {
        err::fail(e, 1, "must fail");
        return;
    }
    e->error = 0;
    static_attest(err::checked(*e));

    Identity mut ik = {0};
    identity_from_str(e, &ik, from, static(len(from)));
    if !err::check(e) {
        err::fail(e, 1, "must fail");
        return;
    }
    e->error = 0;
}

fn test_address(err::Err+et mut* e)
    where err::checked(*e)
{
    Secret mut sk = {0};
    secret_generate(e, &sk);
    if err::check(e) { return; }

    Address mut pk = {0};
    address_from_secret(&pk, &sk);

    char mut buf[50] = {0};
    address_to_str(e, buf, static(len(buf)), &pk);
    if err::check(e) { return; }

    printf("%s\n", buf);

    Address mut pk2 = {0};
    address_from_str(e, &pk2, buf, string::strlen(buf));
    if err::check(e) { return; }

    assert(memcmp(pk.k, pk2.k, sizeof(pk.k)) == 0);
}

export fn main() -> int {
    err::Err+1000 mut e = {0};
    err::new(&e);

    test_identity(&e);
    err::abort(&e);

    test_corrupt_identity(&e);
    err::abort(&e);

    test_address(&e);
    err::abort(&e);

    return 0;
}
