using carrier::sha256;
using <string.h>::{memcmp, strlen};
using <stdio.h>::{printf};

pub fn r1() -> int {
    u8 expect [] = {
        0xba,0x78,0x16,0xbf,
        0x8f,0x01,0xcf,0xea,
        0x41,0x41,0x40,0xde,
        0x5d,0xae,0x22,0x23,
        0xb0,0x03,0x61,0xa3,
        0x96,0x17,0x7a,0x9c,
        0xb4,0x10,0xff,0x61,
        0xf2,0x00,0x15,0xad,
    };

    u8 mut output[32] = {0};
    sha256::Sha256 mut s1 = {0};
    sha256::init(&s1);
    sha256::update(&s1, (u8 *)"abc", 3);
    sha256::finish(&s1, output);

    return memcmp(output, expect, 32);
}

pub fn r2() -> int {
    u8 expect [] = {
        0xe3,0xb0,0xc4,0x42,
        0x98,0xfc,0x1c,0x14,
        0x9a,0xfb,0xf4,0xc8,
        0x99,0x6f,0xb9,0x24,
        0x27,0xae,0x41,0xe4,
        0x64,0x9b,0x93,0x4c,
        0xa4,0x95,0x99,0x1b,
        0x78,0x52,0xb8,0x55,
    };

    u8 mut output[32] = {0};
    sha256::Sha256 mut s1 = {0};
    sha256::init(&s1);
    sha256::update(&s1, (u8 *)"", 0);
    sha256::finish(&s1, output);

    return memcmp(output, expect, 32);
}

pub fn r3() -> int {
    u8 expect [] = {
        0x24,0x8d,0x6a,0x61,
        0xd2,0x06,0x38,0xb8,
        0xe5,0xc0,0x26,0x93,
        0x0c,0x3e,0x60,0x39,
        0xa3,0x3c,0xe4,0x59,
        0x64,0xff,0x21,0x67,
        0xf6,0xec,0xed,0xd4,
        0x19,0xdb,0x06,0xc1
    };

    char * in = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";

    u8 mut output[32] = {0};
    sha256::Sha256 mut s1 = {0};
    sha256::init(&s1);
    sha256::update(&s1, (u8 *)in, static(len(in)));
    sha256::finish(&s1, output);

    return memcmp(output, expect, 32);
}

pub fn r4() -> int {
    u8 expect [] = {
        0xcf,0x5b,0x16,0xa7,
        0x78,0xaf,0x83,0x80,
        0x03,0x6c,0xe5,0x9e,
        0x7b,0x04,0x92,0x37,
        0x0b,0x24,0x9b,0x11,
        0xe8,0xf0,0x7a,0x51,
        0xaf,0xac,0x45,0x03,
        0x7a,0xfe,0xe9,0xd1
    };

    char * in1 = "abcdefghbcdefghicdefghijd";
    char * in2 = "efghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrst";
    char * in3 = "u";

    u8 mut output[32] = {0};
    sha256::Sha256 mut s1 = {0};
    sha256::init(&s1);
    sha256::update(&s1, (u8 *)in1, static(len(in1)));
    sha256::update(&s1, (u8 *)in2, static(len(in2)));
    sha256::update(&s1, (u8 *)in3, static(len(in3)));
    sha256::finish(&s1, output);

    return memcmp(output, expect, 32);
}

pub fn r5() -> int {
    u8 expect [] = {
        0xcd,0xc7,0x6e,0x5c,
        0x99,0x14,0xfb,0x92,
        0x81,0xa1,0xc7,0xe2,
        0x84,0xd7,0x3e,0x67,
        0xf1,0x80,0x9a,0x48,
        0xa4,0x97,0x20,0x0e,
        0x04,0x6d,0x39,0xcc,
        0xc7,0x11,0x2c,0xd0,
    };

    char * in = "a";

    u8 mut output[32] = {0};
    sha256::Sha256 mut s1 = {0};
    sha256::init(&s1);
    for (int mut i = 0; i < 1000000; i++) {
        sha256::update(&s1, (u8 *)in, as<usize>(strlen(in)));
    }
    sha256::finish(&s1, output);

    return memcmp(output, expect, 32);
}

pub fn main() -> int {
    if r1() > 0 || r2() > 0 || r3() > 0 || r4() > 0 || r5() > 0 {
        return 1;
    }
    return 0;
}
