using err;
using <fcntl.h>::{open};
using <sys/stat.h>::{O_RDONLY};
using <unistd.h>::{close, read};
using <errno.h>::{errno, EINTR};
using <poll.h>::{poll, (struct pollfd) as pollfd, POLLIN};

export fn rand(err::Err+et mut* e, u8 mut* mut bytes, usize mut size)
    where err::checked(*e)
    where len(bytes) >= size
{
    int fd2 = as<int>(open("/dev/urandom", O_RDONLY));
    if fd2 < 0 {
        err::fail_with_errno(e, "cannot open /dev/random");
        return;
    }
    static_attest(err::checked(*e));

    for (;;) {
        int l = as<int>(read(fd2, bytes, size));
        if  l < 0 {
            if as<int>(errno) == as<int>(EINTR) {
                continue;
            }
            err::fail_with_errno(e, "cannot read /dev/random");
            close(fd2);
            return;
        }
        if (usize)l >= size {
            close(fd2);
            return;
        }
        size    -= (usize)l;
        bytes   = bytes + (usize)l;
    }
    close(fd2);
}
