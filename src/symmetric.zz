/// SymetricState is a cryptostate that has to be on sync between both peers to be valid.
/// this is used in noice handshake

using cipher;
using sha256;
using err;
using <string.h>::{memcpy, memset, strlen};
using <assert.h>::{assert};
using <errno.h> as errno;
using <stdio.h>::{printf};

pub struct SymmetricState {
     // A chaining key of HASHLEN bytes.
     u8 ck  [sha256::HASHLEN];
     // A hash output of HASHLEN bytes. this is the aad
     u8 h   [sha256::HASHLEN];

     cipher::CipherState mut cipher;
}

pub fn init(SymmetricState mut *self, char *protocolname) {
    memset(self->ck, 0, sizeof(sha256::HASHLEN));
    assert((usize)strlen(protocolname) <= sha256::HASHLEN);
    memcpy(self->ck, protocolname, strlen(protocolname));
    memcpy(self->h, self->ck, sha256::HASHLEN);
}

pub fn mix_hash(SymmetricState mut *self, u8 * data, usize mut l)
    where len(data) >= l
{
    sha256::Sha256 mut s = {0};
    sha256::init(&s);
    sha256::update(&s, self->h, sha256::HASHLEN);
    sha256::update(&s, data, l);
    sha256::finish(&s, self->h);
}

pub fn mix_key(SymmetricState mut * mut self, u8 * data, usize mut l)
    where len(data) >= l
{
    u8 mut h1[sha256::HASHLEN] = {0};
    u8 mut h2[sha256::HASHLEN] = {0};
    static_attest(sha256::HASHLEN == len(self->ck));

    sha256::hkdf(self->ck, data, l, h1, h2, 0);
    memcpy(self->ck, h1, sha256::HASHLEN);
    cipher::init(&(self->cipher), h2);
}

pub fn encrypt_and_mix_hash(
    SymmetricState mut * mut self,
    err::Err+et mut* e,
    u8 *                plain,
    usize               plain_len,
    u64                 nonce,
    u8 mut*             ciphertext,
    usize               cipher_len_max,
) -> usize
    where err::checked(*e)
    where len(ciphertext) >= cipher_len_max
    where len(plain)      >= plain_len
    where len(ciphertext) > plain_len
{

    usize cipher_len = cipher::encrypt_ad(
        &self->cipher, e,
        self->h, sha256::HASHLEN,
        plain, plain_len,
        nonce,
        ciphertext, cipher_len_max);

    if err::check(e) {
        return 0;
    }

    mix_hash(self, ciphertext, cipher_len);
    return cipher_len;
}

pub fn decrypt_and_mix_hash(
    SymmetricState mut *self,
    err::Err+et mut* e,
    u8 *                ciphertext,
    usize               cipher_len,
    u64                 nonce,
    u8 mut*             plain,
    usize               plain_len_max,
) -> usize
    where err::checked(*e)
    where len(ciphertext) >= cipher_len
    where len(plain)      >= plain_len_max
{

    usize plain_len = cipher::decrypt_ad(
        &self->cipher, e,
        self->h, sha256::HASHLEN,
        ciphertext, cipher_len,
        nonce,
        plain, plain_len_max
    );

    if err::check(e) {
        return 0;
    }
    mix_hash(self, ciphertext, cipher_len);
    return plain_len;
}



pub fn split(SymmetricState *self, cipher::CipherState mut *ini, cipher::CipherState mut *resp) {
    u8 mut h1[sha256::HASHLEN] = {0};
    u8 mut h2[sha256::HASHLEN] = {0};
    sha256::hkdf(self->ck, (u8*)"", 0, h1, h2, 0);
    cipher::init(ini, h1);
    cipher::init(resp, h2);
}
