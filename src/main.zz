using <stdio.h>::{printf};
using <string.h>::{memcpy};
using err;
using channel;
using router;
using bootstrap;
using io::unix;
using net;
using io;
using time;
using endpoint;
using router;


export fn main() -> int {

    bootstrap::Store mut store = bootstrap::Store {
        version: 1,
        secret: {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,128,29,30,31,32},
    };

    err::Err+1000 mut e;
    err::new(&e);

    unix::Async+20 mut async;
    async.new();

    memcpy(store.secret, store.secret, 32);
    e.abort();

    io::Io mut tt = io::timeout(&async, &e, time::from_millis(5000));
    e.abort();

    endpoint::Endpoint mut ep = {0};
    ep.start(&e, net::os(), &store, &async);
    e.abort();

    for (;;) {
        if ep.poll(&e, &async) == io::Result::Ready {
            printf("endpoint ready\n");
            tt.close();
        }
        e.abort();

        if tt.valid() {
            u8 mut buf[16];
            usize mut l = 16;
            if tt.read_bytes(&e, buf, &l) == io::Result::Ready {
                e.new();
                err::fail(&e, 3, "timeout");
                e.abort();
                return 2;
            }
            e.abort();
        }
        async.wait(&e);
        e.abort();
    }

    ep.close();
}

