using stream;
using err;
using endpoint;
using slice;
using string;
using identity;
using hpack;
using log;
using channel;
using byteorder;
using protonerf;
using proto;
using mem;

static stream::Config AuthGetConfig = stream::Config {
    path:       "/v2/carrier.config.v1/auth_list",
    open:       auth_get,
};

static stream::Config AuthAddConfig = stream::Config {
    path:       "/v2/carrier.config.v1/auth_add",
    open:       open_then_stream,
    stream:     auth_add_stream,
};

static stream::Config AuthDelConfig = stream::Config {
    path:       "/v2/carrier.config.v1/auth_del",
    open:       open_then_stream,
    stream:     auth_del_stream,
};

static stream::Config NetGetConfig = stream::Config {
    path:       "/v2/carrier.config.v1/net_get",
    open:       net_get,
};

static stream::Config NetJoinConfig = stream::Config {
    path:       "/v2/carrier.config.v1/net_join",
    open:       open_then_stream,
    stream:     net_join_stream,
};

export fn register(endpoint::Endpoint mut*ep)
{
    ep->register_stream(&AuthGetConfig);
    ep->register_stream(&AuthAddConfig);
    ep->register_stream(&AuthDelConfig);
    ep->register_stream(&NetGetConfig);
    ep->register_stream(&NetJoinConfig);
}

fn auth_get_cb(void mut * u, identity::Identity *id, char *resource)
    where nullterm(resource)
{
    let frame = (slice::mut_slice::MutSlice mut *)u;
    static_attest(frame->slice.size >= len(frame->slice.mem));
    static_attest(frame->at <= frame->slice.size);

    new+1000 e = err::make();

    char mut identity_str[64] = {0};
    identity::identity_to_str(&e, identity_str, 64, id);
    if err::check(&e) { e.elog();  return; }

    u8 mut buf[256] = {0};
    new obj = slice::mut_slice::make(buf, 256);
    protonerf::encode_bytes(&obj, &e, proto::AuthorizationAdd::Identity, (u8*)identity_str, string::strlen(identity_str));
    if err::check(&e) { e.elog();  return; }
    protonerf::encode_bytes(&obj, &e, proto::AuthorizationAdd::Path,     (u8*)resource, string::strlen(resource));
    if err::check(&e) { e.elog();  return; }
    protonerf::encode_bytes(frame, &e, proto::AuthListResult::Auth, obj.mem(), obj.at);
    if err::check(&e) { e.elog();  return; }
}

fn auth_get(stream::Stream mut *self, err::Err+et mut*e, slice::Slice *headers)
    where err::checked(*e)
{
    {
        let mut *frame = self->stream(e, 27);
        if err::check(e) { return; }
        hpack::encoder::encode(frame, e, (u8*)":status", 7, (u8*)"200",   3);
        if err::check(e) { return; }
        hpack::encoder::encode(frame, e, (u8*)":type",   5, (u8*)"proto", 5);
        if err::check(e) { return; }
    }

    {
        static_attest(safe(self->chan));
        static_attest(safe(self->chan->endpoint));
        slice::MutSlice mut * frame = self->stream(e, 512);
        if err::check(e) { return; }

        self->chan->endpoint->vault.list_authorizations(e, auth_get_cb, frame);
        if err::check(e) { return; }
    }

    self->close();
}

fn net_get(stream::Stream mut *self, err::Err+et mut*e, slice::Slice *headers)
    where err::checked(*e)
{
    {
        let mut *frame = self->stream(e, 27);
        if err::check(e) { return; }
        hpack::encoder::encode(frame, e, (u8*)":status", 7, (u8*)"200",   3);
        if err::check(e) { return; }
        hpack::encoder::encode(frame, e, (u8*)":type",   5, (u8*)"proto", 5);
        if err::check(e) { return; }
    }

    {
        static_attest(safe(self->chan));
        static_attest(safe(self->chan->endpoint));
        static_attest(safe(self->chan->endpoint->vault.mem));
        slice::MutSlice mut * frame = self->stream(e, 128);
        if err::check(e) { return; }

        identity::Address mut id = {0};
        char mut buf[64] = {0};
        identity::address_to_str(e, buf, 64, (identity::Address*)&self->chan->endpoint->vault.mem->network);
        if err::check(e) { return; }

        protonerf::encode_bytes(frame, e, proto::NetworkGetResult::Address, (u8*)buf, string::strlen(buf));
        if err::check(e) { return; }
    }

    self->close();
}

fn open_then_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice *headers)
    where err::checked(*e)
{
    let mut *frame = self->stream(e, 27);
    if err::check(e) { return; }

    hpack::encoder::encode(frame, e, (u8*)":status", 7, (u8*)"200", 3);
    if err::check(e) { return; }

    hpack::encoder::encode(frame, e, (u8*)":type",   5, (u8*)"proto", 5);
    if err::check(e) { return; }
}

fn return_err(stream::Stream mut *self, err::Err+et mut*e) -> bool

{
    let ch  = e->trace.cstr();
    static_attest(safe(ch));
    let mut chl = string::strlen(ch);
    if chl >  500 {
        chl = 500;
    }

    new+100 e2 = err::make();

    let frame = self->stream(&e2, 8 + chl);
    if err::check(&e2) {
        e2.elog();
        return false;
    }

    protonerf::encode_varint(frame, &e2, proto::ConfigResult::Ok, 0);
    if err::check(&e2) {
        e2.elog();
        return false;
    }

    protonerf::encode_bytes(frame, &e2, proto::ConfigResult::Error, (u8*)ch, chl);
    if err::check(&e2) {
        e2.elog();
        return false;
    }

    self->close();
    return true;
}

fn auth_add_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice *msg) -> bool
    where err::checked(*e)
{
    return auth_add_del_stream(self, e, msg, 1);
}

fn auth_del_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice *msg) -> bool
    where err::checked(*e)
{
    return auth_add_del_stream(self, e, msg, 2);
}

fn auth_add_del_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice *msg, int impl) -> bool
    where err::checked(*e)
{
    static_attest(safe(msg->mem));

    identity::Identity mut addme = {0};
    new+256 mut path = string::make();
    // prover doesnt advance path temporal :(

    let mut decoder = protonerf::decode(msg->mem, msg->size);
    for (;;) {
        let field = decoder.next(e);
        if err::check(e) { return true; }
        if !field.valid {break;}

        switch field.index {
            proto::AuthorizationAdd::Identity => {
                if field.a != 0 {
                    static_attest(safe(field.a));
                    static_attest(field.value.v_len <= len(field.a));
                    identity::identity_from_str(&addme, e, (char*)field.a, field.value.v_len);
                    if err::check(e) {
                        return return_err(self, e);
                    }
                }
            }
            proto::AuthorizationAdd::Path => {
                if field.a != 0 {
                    static_attest(safe(field.a));
                    static_attest(field.value.v_len <= len(field.a));
                    path.clear();
                    path.append_bytes(field.a, field.value.v_len);
                }
            }
            default => {
            }
        }
    }

    let frame = self->stream(e, 20);
    if err::check(e) { return false; }

    if path.slen() == 0 || identity::isnull(addme.k) {
        err::fail(e, err::InvalidArgument, "proto");
        return return_err(self, e);
    }

    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));
    if impl == 1 {
        self->chan->endpoint->vault.add_authorization(e, &addme, path.cstr());
    } else if impl == 2 {
        self->chan->endpoint->vault.del_authorization(e, &addme, path.cstr());
    }
    if err::check(e) {
        return return_err(self, e);
    }
    if self->chan->endpoint->vault.save != 0 {
        static_attest(safe(self->chan->endpoint->vault.save));
        self->chan->endpoint->vault.save(&self->chan->endpoint->vault, e);
    }
    if err::check(e) {
        return return_err(self, e);
    }


    protonerf::encode_varint(frame, e, proto::ConfigResult::Ok, 1);
    if err::check(e) { return true; }

    self->close();
    return true;
}

fn net_join_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice *msg) -> bool
    where err::checked(*e)
{
    static_attest(safe(msg->mem));

    identity::Secret mut nusecret = {0};

    let mut decoder = protonerf::decode(msg->mem, msg->size);
    for (;;) {
        let field = decoder.next(e);
        if err::check(e) { return true; }
        if !field.valid {break;}

        switch field.index {
            proto::NetworkJoin::Secret => {
                if field.a != 0 {
                    static_attest(safe(field.a));
                    static_attest(field.value.v_len <= len(field.a));
                    identity::secret_from_str(&nusecret, e, (char*)field.a, field.value.v_len);
                    if err::check(e) {
                        return return_err(self, e);
                    }
                }
            }
            default => {
            }
        }
    }

    let frame = self->stream(e, 20);
    if err::check(e) { return false; }

    if identity::isnull(nusecret.k) {
        err::fail(e, err::InvalidArgument, "proto");
        return return_err(self, e);
    }

    
    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));
    static_attest(safe(self->chan->endpoint->vault.mem));

    mem::copy(nusecret.k, self->chan->endpoint->vault.mem->network_secret, 32);
    identity::address_from_secret(
        (identity::Address mut*)self->chan->endpoint->vault.mem->network,
        (identity::Secret*)self->chan->endpoint->vault.mem->network_secret
   );

    if err::check(e) {
        return return_err(self, e);
    }
    if self->chan->endpoint->vault.save != 0 {
        static_attest(safe(self->chan->endpoint->vault.save));
        self->chan->endpoint->vault.save(&self->chan->endpoint->vault, e);
    }
    if err::check(e) {
        return return_err(self, e);
    }


    protonerf::encode_varint(frame, e, proto::ConfigResult::Ok, 1);
    if err::check(e) { return true; }


    log::warn("network changed. restart endpoint to take effect");

    self->close();
    return true;
}
