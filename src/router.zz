using identity;
using err;
using noise;
using std;
using hex;
using byteorder;
using <assert.h>::{assert};
using <stdio.h>::{printf};
using <memory.h>::{strlen};
using channel;
using string;
using io;
using net::address;
using net::udp;

enum Direction {
    Initiator2Responder,
    Responder2Initiator,
}

export struct Router {
    channel::Channel        mut broker;
    string::String+1024     mut pkt;

    udp::Socket             mut udp4;
    udp::Socket             mut udp6;
}

pub fn new(channel::Channel brk, udp::Socket udp4, udp::Socket udp6) -> Router {
    return Router {
        broker: brk,
        udp4:   udp4,
        udp6:   udp6,
    };
}

pub fn close(Router mut* self)
{
    self->udp4.close();
    self->udp6.close();
}

pub fn poll(Router mut*self, err::Err+et mut*e) -> io::Result
    where err::checked(*e)
{
    address::Address mut fromaddr = {0};
    self->pkt.clear();
    if self->udp4.recvfrom(e, &self->pkt, &fromaddr) == io::Result::Ready {
        err::new(e);
        self->push(e);
    }
    if err::check(e) {
        e->eprint();
        e->new();
    }

    if self->broker.pull(e, &self->pkt) {
        printf("sending pkt to broker\n");
        hex::dump((u8*)self->pkt.mem, self->pkt.len);
        if err::check(e) { return io::Result::Error; }
        for (usize mut i = 0; i < static(len(self->broker.peering.paths)); i++) {
            if self->broker.peering.paths[i].active {
                switch self->broker.peering.paths[i].addr.type {
                    address::Type::Ipv4 => {
                        self->udp4.sendto(e, &self->pkt, &self->broker.peering.paths[i].addr);
                    }
                    address::Type::Ipv6 => {
                        self->udp6.sendto(e, &self->pkt, &self->broker.peering.paths[i].addr);
                   }
               }
            }
        }
    }

    if err::check(e) {
        return io::Result::Error;
    }

    return io::Result::Later;
}

pub fn push(Router mut* self, err::Err+et mut* e)
    where err::checked(*e)
{
    printf("incomming pkt %zu\n", (self->pkt).len);

    static_attest(len(self->pkt.mem) >= self->pkt.len);
    hex::dump((u8*)self->pkt.mem, self->pkt.len);

    if self->pkt.len < 4 + 8 + 8 + 16   {
        err::fail(e, 1, "too small");
        return;
    }

    // version 1B
    if (self->pkt.mem)[0] != 9 {
        err::fail(e, 1, "invalid version");
        return;
    }
    // reserved 3B
    // route    8B
    u8 *rkeymem = (u8*)self->pkt.mem + 4;
    static_attest(safe(rkeymem));
    static_attest(len(rkeymem) > 8);
    u64 routingkey = read_routing_key(rkeymem, 0);
    // counter  8B
    u64 counter = byteorder::from_be64(*(u64*)&(self->pkt.mem)[12]);
    printf("<> counter %lu\n", counter);
    usize mut at = 4 + 8 + 8;

    u8 mut * ciphertext     = (u8 mut*)self->pkt.mem + at;
    usize ciphertext_len    = self->pkt.len - at;
    static_attest(safe(ciphertext));
    static_attest(len(ciphertext) >= ciphertext_len);

    if ciphertext_len <= 16 {
        err::fail(e, 1, "too small");
        return;
    }

    if routingkey == (self->broker).route {
        channel::push(&(self->broker), e, ciphertext, ciphertext_len, counter);
    }
}

pub fn read_routing_key( u8 * i, Direction mut * unsafe direction) -> u64
    where len(i) >= 8
{
    if direction != 0 {
        static_attest(safe(direction));
        if (i[7] & 0b00000001) == 0 {
            *direction = Direction::Initiator2Responder;
        } else {
            *direction = Direction::Responder2Initiator;
        }
    }
    unsafe {
        u8 b[8] = {
            i[0],
            i[1],
            i[2],
            i[3],
            i[4],
            i[5],
            i[6],
            (i[7] & 0b11111110),
        };
        return *((u64*)b);
    }
}

