using stream;
using identity;
using err;
using channel;
using endpoint;
using byteorder;
using hpack;
using log;
using slice;
using protonerf;
using proto;
using initiator;
using <stdlib.h>::{atoi};
using peering;
using <string.h>::{memcpy};
using hex;
using string;

export fntype disconnect_t  (Connect mut *con, endpoint::Endpoint mut *ep);
export fntype connect_t     (Connect mut *con, channel::Channel mut *chan);

export struct Connect {
    identity::Identity      target;
    identity::Identity      principal;
    initiator::Initiator    initiator;
    u64                     initiator_time;
    string::String+1024     mut initiator_pkt;
    disconnect_t            on_disconnect;
    connect_t               on_connect;

    void mut *user1;
    usize mut user2;
}

static stream::Config ConnectStream = stream::Config {
    path:   "/carrier.broker.v1/broker/connect",
    stream: on_stream,
    close:  on_close,
};

export fn start(Connect mut new *self, err::Err+et mut*e, endpoint::Endpoint mut*ep, identity::Identity *target)
    where err::checked(*e)
{
    memcpy(&self->target.k, target->k, static(len(self->target.k)));

    ep->vault.get_identity(&self->principal);

    self->initiator.initiate(
        e,
        false,
        &ep->vault,
        initiator::Move::Never,
        0,
        0,
        &self->initiator_pkt
    );
    if err::check(e) { return; }


    stream::Stream mut* streami = ep->broker()->open(e, &ConnectStream);
    if err::check(e) { return; }
    static_attest(safe(streami));
    streami->user2 = self;
}

fn on_close(stream::Stream mut *self, err::Err+et mut*e) {
    //TODO
    log::error("connect closed");

    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));
    static_attest(safe(self->user2));
    Connect mut *this = self->user2;

    if this->on_disconnect != 0 {
        static_attest(safe(this->on_disconnect));
        this->on_disconnect(this, self->chan->endpoint);
    }
}

fn on_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice *bs) -> bool
    where err::checked(*e)
{
    static_attest(safe(self->chan));
    static_attest(safe(self->user2));
    Connect mut *this = self->user2;

    if self->state == 0 {
        int mut rcode = 0;
        new it = hpack::decoder::decode(bs);
        while it.next(e) {
            if it.key.eq_cstr(":status") {
                rcode = (int)atoi((char*)it.val.mem);
            }
        }
        if err::check(e) {
            return false;
        }
        if rcode != 200 {
            log::error("connect response");
            new it = hpack::decoder::decode(bs);
            while it.next(e) {
                log::error("  %.*s: %.*s", it.key.size, it.key.mem, it.val.size, it.val.mem);
            }
            self->close();
            return true;
        }


        slice::MutSlice mut * frame = self->chan->q.alloc(e, channel::FrameType::Stream, 100 + this->initiator_pkt.len);
        if err::check(e) {
            return false;
        }
        static_attest(frame->slice.size > 8);

        self->state = 1;

        frame->push32(byteorder::to_be32(1)); // stream
        frame->push64(byteorder::to_be64(2)); // order
        frame->push16(0); // size placeholder

        protonerf::encode_bytes(frame, e, proto::ConnectRequest::Principal, this->principal.k, 32);
        e->abort();

        protonerf::encode_bytes(frame, e, proto::ConnectRequest::Target, this->target.k, 32);
        e->abort();

        protonerf::encode_varint(frame, e, proto::ConnectRequest::Timestamp, this->initiator_time);
        e->abort();

        protonerf::encode_varint(frame, e, proto::ConnectRequest::Timeout, 1);
        e->abort();

        static_attest(len(this->initiator_pkt.mem) >= this->initiator_pkt.len);
        protonerf::encode_bytes(frame, e, proto::ConnectRequest::Handshake, (u8*)this->initiator_pkt.mem, this->initiator_pkt.len);
        e->abort();

    } else if self->state == 1 {

        peering::Peering mut peerings = {0};
        memcpy(&peerings, &self->chan->peering, sizeof(peering::Peering));

        static_attest(safe(bs->mem));
        let mut dec = protonerf::decode(bs->mem, bs->size);
        bool mut ok = false;
        slice::slice::Slice mut handshake = {0};
        u64 mut route = 0;
        for(;;) {
            let field = dec.next(e);
            if err::check(e) {
                e->elog();
                return true;
            }
            if !field.valid {
                break;
            }
            switch field.index {
                proto::ConnectResponse::Error => {
                    log::error("error: %.*s", field.value.v_len, field.a);
                }
                proto::ConnectResponse::Ok => {
                    ok = field.value.v_bool != 0;
                }
                proto::ConnectResponse::Paths => {
                    peerings.from_proto(e, field);
                    if err::check(e) {
                        e->elog();
                        return true;
                    }
                }
                proto::ConnectResponse::Route => {
                    route = byteorder::to_be64(field.value.v_u64);
                }
                proto::ConnectResponse::Handshake => {
                    handshake.mem  = field.a;
                    handshake.size = field.value.v_len;
                }
            }
        }

        if ok {
            if handshake.mem == 0 || route == 0 {
                err::fail(e, err::InvalidArgument, "missing protobuf field");
                return true;
            }
            static_attest(len(handshake.mem) >= handshake.size);

            // unfortunate misdesign of tunneling an entire init packet
            // which actually contains no interesting information
            if handshake.size < 1 + 3 + 8 + 8 + 32 + 16 + 3 + 32 + 8 {
                err::fail(e, err::InvalidArgument, "too small");
                return true;
            }
            memcpy(this->initiator_pkt.mem, handshake.mem, handshake.size);
            this->initiator_pkt.len = handshake.size;


            endpoint::Endpoint mut * ep = self->chan->endpoint;
            err::assert_safe(ep);
            let nuchan = ep->statem.connected.next_channel();
            if nuchan == 0 {
                return false;
            }
            static_attest(safe(nuchan));

            this->initiator.complete(e, nuchan, 0, &this->initiator_pkt, &this->target);
            if err::check(e) {
                return true;
            }

            if nuchan->route != route {
                err::fail(e, err::InvalidArgument, "broker and peer disagree on route");
                nuchan->route = 0;
                return true;
            }

            self->broker_route = route;

            nuchan->q.allocator = self->chan->q.allocator;
            nuchan->store       = self->chan->store;
            nuchan->endpoint    = self->chan->endpoint;
            memcpy(&nuchan->peer,  &this->target, sizeof(identity::Identity));
            memcpy(&nuchan->peering, &peerings, sizeof(peering::Peering));

            if this->on_connect != 0 {
                static_attest(safe(this->on_connect));
                this->on_connect(this, nuchan);
            }

        } else {
            self->close();
        }
    }

    return true;
}

