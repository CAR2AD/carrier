using identity;
using err;
using noise;
using mem;
using hex;
using byteorder;
using <assert.h>::{assert};
using <stdio.h>::{printf};
using <string.h>::{strlen, memcpy, memset};
using string;
using cipher;
using router;
using symmetric;
using vault;
using revision;
using crc8;
using channel;
using log;
using endpoint;
using bootstrap;
using vault;
using time;

export struct Initiator {
    noise::Initiator mut    noise;
    u64 tick_time_start;
    bool secure;
}


export enum Move {
    Self,
    Never,
    Target,
}

//TODO this is minimal prototype code to get v9 working.
//     dont forget fuzzing when implementing v10
pub fn initiate(
    Initiator mut*      self,
    err::Err+et mut*    e,
    bool                secure,
    vault::Vault*       vault,
    Move                move,
    identity::Identity* unsafe cluster_target,
    identity::Address*  unsafe xaddr,
    u64                 vector_time,
    string::String+st   mut* pkt,
)
    where err::checked(*e)
    where st>=1024
{
    memset(self, 0, sizeof(Initiator));
    self->secure = secure;

    identity::Identity mut eid = {0};
    vault->get_identity(&eid);

    if secure {
        err::assert_safe(xaddr);
        identity::nullcheck(e, xaddr->k);
        e->abort();
        mem::copy(xaddr->k, ((self->noise).remote_static).k, 32);
    }

    identity::secret_generate(&(self->noise).ephemeral, e);

    if err::check(e) {
        return ;
    }


    u8 mut plaintext[512] = {0};

    // flags
    switch move {
        Move::Never => {
            plaintext[1] = 0b01000000;
        }
        Move::Self  => {}
        Move::Target => {
            plaintext[1] = 0b00100000;
        }
    }

    usize mut plaintext_len = 0;
    if secure {
        // flags + crc
        plaintext_len  += 2;
    }

    memcpy(plaintext + plaintext_len, eid.k, 32);
    plaintext_len += 32;

    u64 network_time_be = byteorder::to_be64(vector_time);
    memcpy(plaintext + plaintext_len, &network_time_be, 8);
    plaintext_len += 8;

    u32 revision_be = byteorder::to_be32(revision::REVISION);
    memcpy(plaintext + plaintext_len, &revision_be, 4);
    plaintext_len += 4;

    if secure {
        // move target 32B
        if move == Move::Target && cluster_target != 0 {
            static_attest(safe(cluster_target));
            mem::copy(cluster_target->k, plaintext + plaintext_len, 32);
            plaintext_len += 32;
        }

        // padding expected ciphertext size to nearest 64 byte before authentication tag
        plaintext_len += 64 - ((plaintext_len - 16)  % 64);
    } else {
        // padding expected ciphertext size to nearest 128 byte before authentication tag
        plaintext_len += 128 - ((plaintext_len)  % 128);
    }


    //printf("plaintext len %zu\n", plaintext_len);

    pkt->len  = 0;
    // version 1B
    if secure {
        (pkt->mem)[0] = 9;
    } else {
        (pkt->mem)[0] = 8;
        (pkt->mem)[1] = 0xff;
        (pkt->mem)[2] = 0xff;
        (pkt->mem)[3] = 0xff;
    }
    // reserved 3B
    // route    8B
    // counter  8B
    pkt->len += 4 + 8 + 8;

    if secure {
        // this is so stupid
        plaintext[0] = crc8::broken_crc8(0, (u8*)pkt->mem, pkt->len);
    }

    u8 mut* pp = (u8 mut*)pkt->mem + pkt->len;
    usize pplen = st - pkt->len;
    static_attest(safe(pp));
    static_attest(len(pp) >= pplen);

    usize prologue_len = (usize)strlen(endpoint::PROLOGUE);
    static_attest(prologue_len < len((u8*)endpoint::PROLOGUE));


    //printf("plaintext:\n");
    //hex::dump(plaintext, plaintext_len);

    if secure {
        pkt->len += noise::initiate(
            &self->noise, e,
            pp, pplen,
            (u8*)endpoint::PROLOGUE, prologue_len,
            plaintext, plaintext_len
        );
    } else {
        pkt->len += noise::initiate_insecure(
            &self->noise, e,
            pp, pplen,
            (u8*)endpoint::PROLOGUE, prologue_len,
            plaintext, plaintext_len
        );
    }

    if err::check(e) {
        return;
    }

    //printf("ciphertext len %zu\n", pkt->len - 4 - 8 - 8);
    if secure {
        assert((pkt->len - 4 - 8 - 8) % 64 == 0);
    }


    //printf("handshake hash:\n");
    //hex::dump(((self->noise).symm).h, static(len(((self->noise).symm).h)));

    //printf("identity:\n");
    //hex::dump(eid.k, 32);

    //sign handshake hash
    u8 mut signme[static(len(endpoint::SIGN_PURPOSE)) + static(len(((self->noise).symm).h))] = {0};
    mem::copy(endpoint::SIGN_PURPOSE, signme, string::strlen(endpoint::SIGN_PURPOSE));
    u8 mut * mm = signme + string::strlen(endpoint::SIGN_PURPOSE);
    mem::copy(((self->noise).symm).h,  mm, static(len(((self->noise).symm).h)));


    identity::Signature mut*sig= (identity::Signature mut*)(pkt->mem + pkt->len);
    static_attest(safe(sig));

    vault->sign(sig, signme, static(len(signme)));
    pkt->len += 64;

    //printf("packet len %zu\n", pkt->len);
    //static_attest(len(pkt->mem) >= pkt->len);
    //hex::dump((u8*)pkt->mem, pkt->len);

    let now_t = time::tick();
    let now = now_t.to_millis();
    self->tick_time_start = now_t.to_millis();
}


pub fn complete (
    Initiator       mut* self,
    err::Err+et     mut* e,

    channel::Transfer mut* chan,
    vault::Broker   mut* unsafe redirect,

    string::String+st   mut* pkt,

    identity::Identity * unsafe expect_identity,
)
    where err::checked(*e)
    where st>=1024
{
    //printf("completing with %zu\n", pkt->len);
    //static_attest(len(pkt->mem) >  pkt->len);
    //hex::dump((u8*)pkt->mem, pkt->len);

    if pkt->len < 4 + 8 + 8 + 32 + 16  + 64 {
        err::fail(e, channel::InvalidFrame , "too small");
        return;
    }

    // version 1B
    let mut version = (pkt->mem)[0];
    if self->secure {
        if version != 9 {
            err::fail(e, channel::InvalidFrame, "invalid version %d", version);
            return;
        }
    } else {
        if version != 8 {
            err::fail(e, channel::InvalidFrame, "invalid version %d", version);
            return;
        }
    }
    // reserved 3B
    // route    8B
    u8 *rkeymem = (u8*)pkt->mem + 4;
    static_attest(safe(rkeymem));
    static_attest(len(rkeymem) > 8);
    u64 route = router::read_routing_key(rkeymem, 0);
    // counter  8B
    u64 counter = byteorder::from_be64(*&(pkt->mem)[12]);
    //printf("<> counter %lu\n", counter);
    usize mut at = 4 + 8 + 8;


    u8 mut *ciphertext   = (u8 mut*)pkt->mem + at;
    usize ciphertext_len = pkt->len - at - 64;
    static_attest(safe(ciphertext));
    static_attest(len(ciphertext) >= ciphertext_len);

    u8 mut cleartext[1024] = {0};

    usize cleartext_len = noise::complete(
        &self->noise,
        e,
        cleartext,
        static(len(cleartext)),
        ciphertext,
        ciphertext_len
    );

    if err::check(e) {
        return;
    }

    //printf("received cleartext:\n");
    //hex::dump(cleartext, cleartext_len);

    if cleartext_len < 32 + 2 + 8 + 4 {
        err::fail(e, channel::InvalidFrame, "too small");
        return;
    }

    bool mut flag_mov = false;
    u8 * mut pp = cleartext;
    if self->secure {
        // flags
        flag_mov = (cleartext[1] & 0b01000000) != 0;
        pp  = cleartext + 2;
    }


    // remote identity
    identity::Identity mut r_identity = {0};
    static_attest(safe(pp));
    static_attest(len(pp) >= 32);
    mem::copy(pp, r_identity.k, 32);

    pp = pp + 32;

    // timestamp
    u64 mut timestamp = 0;
    unsafe {
        timestamp = *(u64*)pp;
    }
    pp = pp + 8;


    //check handshake signature
    u8 mut signme[static(len(endpoint::SIGN_PURPOSE)) + static(len(((self->noise).symm).h))] = {0};
    mem::copy(endpoint::SIGN_PURPOSE, signme, string::strlen(endpoint::SIGN_PURPOSE));
    u8 mut* mm = signme + string::strlen(endpoint::SIGN_PURPOSE);
    mem::copy(((self->noise).symm).h, mm, static(len(((self->noise).symm).h)));
    identity::Signature mut * mut sig;
    unsafe {
        sig = (identity::Signature mut *)(pkt->mem + pkt->len - 64);
    }
    static_attest(safe(sig));
    if !identity::verify(&r_identity, sig, signme, static(len(signme))) {
        err::fail(e, channel::InvalidFrame, "invalid signature");
        return;
    }


    if expect_identity != 0 {
        static_attest(safe(expect_identity));
        if !expect_identity->eq(&r_identity) {
            err::fail(e, channel::InvalidFrame, "mismatched identity");
        }
    }

    char mut r_identity_str[128] = {0};
    identity::identity_to_str(e, r_identity_str, static(len(r_identity_str)), &r_identity);
    if err::check(e) {
        return;
    }

    // parse the rest of the cleartext, after signature passed


    // move instructions
    if flag_mov  && redirect != 0 {
        static_attest(safe(redirect));
        u16 mut instruction_len = 0;
        unsafe {
            instruction_len = byteorder::from_be64(*(u64*)pp);
        }
        pp = pp + 8;

        string::String+300 mut movinstr = {0};
        string::append_bytes(&movinstr, pp, (usize)instruction_len);

        if bootstrap::parse_record(&movinstr, redirect) {
            //log::debug("cluster move %.*s", (int)movinstr.len, movinstr.mem);
            return;
        }
    }

    *chan = channel::transfer_from_symmetric(
        &self->noise.symm,
        version,
        route,
        false
    );

    let now = time::tick();
    chan->rtt = (now.to_millis() - self->tick_time_start);
    log::debug("channel to %s via route %d rtt %ums", r_identity_str, route, chan->rtt);
}
