using cipher;
using symmetric;
using <stdio.h>::{printf, fprintf, stderr};
using err;
using hex;
using byteorder;
using pq;
using std;
using crc8;
using <assert.h>::{assert};
using string;
using peering;

export struct Channel {
    u64     route;
    bool    responder;
    u64     mut counter_out;
    cipher::CipherState mut c_mine;
    cipher::CipherState mut c_them;
    pq::Q   mut q;
    peering::Peering  mut peering;

    u64     mut outgoing_acks[32];
    u8      mut outgoing_acks_at;
}


pub fn from_symmetric(symmetric::SymmetricState * symm, u64 route, bool responder) -> Channel {
    Channel mut c = Channel{
        route:      route,
        responder:  responder,
    };

    if responder {
        symmetric::split(symm, &c.c_them, &c.c_mine);
    } else {
        symmetric::split(symm, &c.c_mine, &c.c_them);
    }

    c.counter_out = 1;
    c.outgoing_acks_at = 1;

    return c;
}

pub fn pull(Channel mut* self, err::Err+et mut* e, string::String+st mut* buf) -> bool
    where err::checked(*e)
    where st >= 4 + 8 + 8 + 320
{
    if self->outgoing_acks_at == 0 {
        return false;
    }

    u64 counter_be = byteorder::to_be64(self->counter_out+ 1 /* rust version has an off by one*/);
    u8* counter_b = (u8*)&counter_be;

    u64 mut route   = self->route;
    u8 mut* mut route_b = (u8 mut*)&route;
    if self->responder {
        unsafe {
        route_b[7] |= 0b00000001;
        }
    }

    // version 1B
    buf->mem[0] = 0x09;
    // reserved 3B
    buf->mem[1] = 0x00;
    buf->mem[2] = 0x00;
    buf->mem[3] = 0x00;
    unsafe {
        std::memcpy(buf->mem + 4,     route_b,    8);
        std::memcpy(buf->mem + 4 + 8, counter_b,  8);
    }

    buf->len = 4 + 8 + 8;
    usize unencrypted_size = buf->len;

    //broken header crc
    buf->mem[buf->len] = (char)crc8::broken_crc8(0, (u8*)buf->mem, 4 + 8 + 8);
    buf->len += 1;

    //flags
    buf->mem[buf->len] = 0x00;
    buf->len += 1;

    //payload size
    u16 mut * payload_size = (u16 mut*)(buf->mem + buf->len);
    buf->len += 2;


    usize size_before_payload = buf->len;


    // all outgoing acks will fit in because 32 * 8 = 256
    // if they did not, we would need a fifo
    if self->outgoing_acks_at > 0 {

        // frame type
        buf->mem[buf->len] = 0x01;
        buf->len += 1;

        // ack delay
        buf->mem[buf->len ]       = 0x00;
        buf->mem[buf->len + 1]   = 0x01;
        buf->len += 2;

        // number of acks
        buf->mem[buf->len ]     = 0x00;
        buf->mem[buf->len+ 1]   = (char)self->outgoing_acks_at;
        buf->len += 2;

        static_attest(len(self->outgoing_acks) > self->outgoing_acks_at);
        for (usize mut i = 0; i < (usize)self->outgoing_acks_at ; i++) {
            assert(buf->len < st);
            u64 ackd  = byteorder::to_be64((self->outgoing_acks)[i]);
            unsafe {
                std::memcpy(buf->mem + buf->len , &ackd, 8);
            }
            buf->len += 8;
        }
        self->outgoing_acks_at = 0;
    }

    (*payload_size) = byteorder::to_be16(buf->len - size_before_payload);

    // padding to %64
    buf->len += 64 - ((buf->len + 16) % 64);
    if buf->len > st {
        buf->len = st;
    }

    usize padded_size = buf->len - unencrypted_size;
    usize budget      = st       - unencrypted_size;

    static_attest(buf->len < len(buf->mem));
    hex::dump((u8*)buf->mem, buf->len);

    u8* plaintext = (u8*)buf->mem + 4 + 8 + 8;
    static_attest(safe(plaintext));

    u8 mut* ciphertext = (u8 mut*)buf->mem + unencrypted_size;
    static_attest(safe(ciphertext));

    static_attest(len(ciphertext) >= padded_size);
    static_attest(len(ciphertext) >= budget);

    usize cipherlen = cipher::encrypt(
        &(self->c_mine),
        e,
        ciphertext,
        padded_size,
        self->counter_out,
        ciphertext,
        budget
    );

    if err::check(e) {
        return false;
    }

    self->counter_out += 1;

    buf->len = unencrypted_size + cipherlen;
    return true;
}

pub fn push(Channel mut* self, err::Err+et mut* e, u8 mut* body, usize l, u64 counter)
    where err::checked(*e)
    where len(body) >= l
    where l > 16
{
    // counter is offset by one in the rust implementation
    u64 realcounter = counter - 1;

    usize plainlen = cipher::decrypt(
        &(self->c_them),
        e,
        body,
        l,
        realcounter,
        body,
        l
    );
    if err::check(e) {
        return;
    }

    // broken crc and flags 2B
    // payload len 2B
    usize mut frames_len;
    unsafe {frames_len = byteorder::from_be16(*(u16*)(body + 2)) }
    u8 *frames = body + 4;
    if frames_len >= plainlen - 4 {
        err::fail(e, 192, "corrupt");
        return;
    }

    for (usize mut i = 0; i < frames_len; i++) {
        static_attest(i < len(frames));
        static_attest(i < len(body));
        switch frames[i] {
            0x00 => {}
            0x01 => {
                printf("received ack frame\n");
                //TODO
            }
            0x02 => {
                printf("received ping frame\n");
                ack(self, e, counter);
                if err::check(e) {
                    return;
                }
            }
            0x03 => {
                printf("received disconnect frame\n");
                //TODO
            }
            0x04 => {
                printf("received open frame\n");
                //TODO
            }
            0x05 => {
                printf("received stream frame\n");
                //TODO
            }
            0x06 => {
                printf("received close frame\n");
                //TODO
            }
            0x07 => {
                printf("received configure frame\n");
                //TODO
            }
            0x08 => {
                printf("received fragment\n");
                //TODO
            }
            default => {
                err::fail(e, 194, "invalid frame %u", body[i]);
                return;
            }
        }
    }
}

pub fn ack(Channel mut* self, err::Err mut* e, u64 ackd) {
    if (usize)self->outgoing_acks_at < (usize)sizeof(self->outgoing_acks) {
        static_attest((usize)self->outgoing_acks_at < len(self->outgoing_acks));
        (self->outgoing_acks)[(usize)self->outgoing_acks_at] = ackd;
        self->outgoing_acks_at+=1;
    } else {
        fprintf(stderr, "outgoing ack buffer overflow\n");
    }
}


