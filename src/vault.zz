using err;
using identity;
using log;
using mem;
using buffer;
using <string.h>::{memcpy};

export closure close_fn (Vault mut*self);

export closure get_secret_fn         (Vault *self, identity::Secret  mut * secret);
export closure get_network_fn        (Vault *self, identity::Address mut * address);
export closure get_network_secret_fn (Vault *self, identity::Secret   mut * address);
export closure advance_clock_fn      (Vault *self) -> u64;
export closure set_network_fn        (Vault *self, err::Err+et mut *e, identity::Secret * secret);

export closure del_authorization_fn(Vault mut * self, err::Err+et mut *e, identity::Identity *delme, char *resource);
export closure add_authorization_fn(Vault mut * self,err::Err+et mut *e, identity::Identity *addme, char *resource);
export closure list_authorizations_cb(void mut * unsafe user, identity::Identity *id, char *resource);
export closure list_authorizations_fn(Vault * self, err::Err+et mut *e, list_authorizations_cb cb, void mut * unsafe user);


export const usize MAX_BROKERS = 16;
export struct Broker packed {
    u8 protocol;
    u8 reserved[3];

    u8 xaddr[32];
    u8 ip4addr[4];
    u8 ip6addr[16];
}

export struct Vault
{
    close_fn                i_close;

    get_secret_fn           i_get_secret;
    get_network_fn          i_get_network;
    advance_clock_fn        i_advance_clock;
    set_network_fn          i_set_network;
    get_network_secret_fn   i_get_network_secret;

    list_authorizations_fn  i_list_authorizations;
    del_authorization_fn    i_del_authorization;
    add_authorization_fn    i_add_authorization;
    void mut * unsafe       user;

    // in memory store for when loading the vault from an secretkit
    identity::SecretKit ik;

    //TODO isn't stored yet, because we don't actually have the protocol implemented
    Broker broker[MAX_BROKERS];
}

export fn close(Vault mut * self)
{
    if self->i_close.fn != 0 {
        static_attest(safe(self->i_close));
        self->i_close(self);
    }
}



struct CheckExistingAuthorizationState {
    identity::Identity *addme;
    char * resource;
    bool found;
}

fn check_existing_authorizations_cb(void mut * unsafe user, identity::Identity *id, char *resource)
    where nullterm(resource)
{
    let s = (CheckExistingAuthorizationState mut *)user;
    static_attest(safe(s));
    static_attest(safe(s->addme));
    static_attest(safe(s->resource));
    static_attest(nullterm(s->resource));
    if identity::eq(id, s->addme) && buffer::cstr_eq(resource, s->resource) {
        s->found = true;
    }
}

export fn add_authorization(Vault mut * self, err::Err+et mut *e, identity::Identity *addme, char *resource)
{
    static_attest(safe(self->i_add_authorization));
    static_attest(safe(self->i_list_authorizations));

    let mut s = CheckExistingAuthorizationState{
        addme,
        resource,
    };
    self->i_list_authorizations(self, e, check_existing_authorizations_cb, &s);
    if e->check() { return; }

    if s.found {return; }

    self->i_add_authorization(self, e, addme, resource);
}

export fn del_authorization(Vault mut * self, err::Err+et mut *e, identity::Identity *delme, char *resource)
{
    static_attest(safe(self->i_del_authorization));
    self->i_del_authorization(self, e, delme, resource);
}

export fn list_authorizations(Vault mut * self, err::Err+et mut *e, list_authorizations_cb cb, void mut * unsafe user)
{
    static_attest(safe(self->i_list_authorizations));
    self->i_list_authorizations(self, e, cb, user);
}

export fn get_network(Vault * self, identity::Address mut *addr)
{
    static_attest(safe(self->i_get_network));
    self->i_get_network(self, addr);
}

export fn get_network_secret(Vault * self, identity::Secret mut *addr)
{
    static_attest(safe(self->i_get_network_secret));
    self->i_get_network_secret(self, addr);
}

export fn set_network(Vault mut * self,err::Err+et mut *e, identity::Secret *network)
{
    static_attest(safe(self->i_set_network));
    self->i_set_network(self, e, network);
}

export fn vector_time(Vault * self) -> u64
{
    static_attest(safe(self->i_advance_clock));
    return self->i_advance_clock(self);
}

export fn sign(Vault * self, identity::Signature mut *s, u8 * subject, usize subject_len) {
    identity::Secret mut se = {0};
    static_attest(safe(self->i_get_secret));
    self->i_get_secret(self, &se);

    err::Err+200 mut e;
    e.make();
    identity::nullcheck(&e, se.k);
    e.abort();

    identity::sign(&se, s, subject, subject_len);
}

export fn get_identity(Vault * self, identity::Identity mut*id)
{
    identity::Secret mut s = {0};
    static_attest(safe(self->i_get_secret));
    self->i_get_secret(self, &s);
    identity::identity_from_secret(id, &s);
}

export fn broker_count(Vault * self) -> usize
{
    usize mut c = 0;
    for (usize mut i = 0; i < MAX_BROKERS; i++) {
        if self->broker[i].protocol != 0 {
            c++;
        }
    }
    return c;
}

export fn authorize_connect(Vault * self, identity::Identity *ii) -> bool
{
    return self->authorize_open_stream(ii, 0);
}






struct authorize_open_stream_cb_s{
    identity::Identity *ii;
    char * path;


    bool mut accepted;
    bool mut has_any;
}

fn list_authorizations_cb_i(void mut * user, identity::Identity *id, char *resource)
    where nullterm(resource)
{
    let si = (authorize_open_stream_cb_s mut*)user;
    si->has_any = true;

    static_attest(safe(si));
    static_attest(safe(si->ii));
    static_attest(nullterm(si->path));
    if identity::eq(id, si->ii) {
        if si->ii == 0 {
            si->accepted = true;
        } else if buffer::cstr_eq(resource, "*") || buffer::cstr_eq(resource, si->path) {
            si->accepted = true;
        }
    }
}

export fn authorize_open_stream(Vault * self, identity::Identity *ii, char * unsafe path) -> bool
    where path == 0 || nullterm(path)
{
    let mut si = authorize_open_stream_cb_s{
        ii:         ii,
        path:       path,
        has_any:    false,
        accepted:   false,
    };
    static_attest(safe(self->i_list_authorizations));

    new+200 e = err::make();
    self->i_list_authorizations(self, &e, list_authorizations_cb_i, &si);
    if err::check(&e) {
        e.elog();
        return false;
    }

    if !si.has_any {
        if path == 0 {
            log::warn("no authorizations configured, accepting config");
            return true;
        }
        if buffer::cstr_eq(path, "/v2/carrier.config.v1/auth_add") {
            log::warn("no authorizations configured, accepting %s", path);
            return true;
        }
        log::warn("no authorizations configured, not accepting %s", path);
        return false;
    }

    return si.accepted;

}

