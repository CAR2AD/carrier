using protonerf;
export enum Path__Category {
  Invalid = 0,
  Local = 1,
  Internet = 2,
  BrokerOrigin = 3,
}

export enum Path {
  Ipaddr = 1,
  Category = 2,
}

export fn PathTypes (usize index) -> protonerf::FieldType {
    switch index {
        Path::Ipaddr => {
            return protonerf::FieldType::Message;
        }
        Path::Category => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum FilterByRole {
  Roles = 1,
}

export fn FilterByRoleTypes (usize index) -> protonerf::FieldType {
    switch index {
        FilterByRole::Roles => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Filter {
  Role = 1,
}

export fn FilterTypes (usize index) -> protonerf::FieldType {
    switch index {
        Filter::Role => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum SubscribeRequest {
  Shadow = 1,
  Filter = 2,
  GroupKey = 3,
  GroupShard = 4,
  ShardWeight = 5,
}

export fn SubscribeRequestTypes (usize index) -> protonerf::FieldType {
    switch index {
        SubscribeRequest::Shadow => {
            return protonerf::FieldType::Message;
        }
        SubscribeRequest::Filter => {
            return protonerf::FieldType::Message;
        }
        SubscribeRequest::GroupKey => {
            return protonerf::FieldType::Message;
        }
        SubscribeRequest::GroupShard => {
            return protonerf::FieldType::Message;
        }
        SubscribeRequest::ShardWeight => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Publish {
  Identity = 1,
  Xaddr = 2,
}

export fn PublishTypes (usize index) -> protonerf::FieldType {
    switch index {
        Publish::Identity => {
            return protonerf::FieldType::Message;
        }
        Publish::Xaddr => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Unpublish {
  Identity = 1,
}

export fn UnpublishTypes (usize index) -> protonerf::FieldType {
    switch index {
        Unpublish::Identity => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export fn SupersedeTypes (usize index) -> protonerf::FieldType {
    switch index {
    }
    return protonerf::FieldType::Skip;
}


export enum SubscribeChange {
  Publish = 1,
  Unpublish = 2,
  Supersede = 3,
}

export fn SubscribeChangeTypes (usize index) -> protonerf::FieldType {
    switch index {
        SubscribeChange::Publish => {
            return protonerf::FieldType::Message;
        }
        SubscribeChange::Unpublish => {
            return protonerf::FieldType::Message;
        }
        SubscribeChange::Supersede => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum PublishRequest {
  Xaddr = 1,
  Shadow = 2,
  Shortcut = 3,
}

export fn PublishRequestTypes (usize index) -> protonerf::FieldType {
    switch index {
        PublishRequest::Xaddr => {
            return protonerf::FieldType::Message;
        }
        PublishRequest::Shadow => {
            return protonerf::FieldType::Message;
        }
        PublishRequest::Shortcut => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Shortcut {
  Shortcut = 1,
  Expires = 2,
}

export fn ShortcutTypes (usize index) -> protonerf::FieldType {
    switch index {
        Shortcut::Shortcut => {
            return protonerf::FieldType::Message;
        }
        Shortcut::Expires => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum PublishChange {
  Supersede = 1,
  Shortcut = 2,
}

export fn PublishChangeTypes (usize index) -> protonerf::FieldType {
    switch index {
        PublishChange::Supersede => {
            return protonerf::FieldType::Message;
        }
        PublishChange::Shortcut => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ConnectRequest {
  Target = 1,
  Timestamp = 2,
  Handshake = 3,
  Paths = 4,
  Principal = 5,
  Timeout = 6,
  Shortcut = 7,
}

export fn ConnectRequestTypes (usize index) -> protonerf::FieldType {
    switch index {
        ConnectRequest::Target => {
            return protonerf::FieldType::Message;
        }
        ConnectRequest::Timestamp => {
            return protonerf::FieldType::Message;
        }
        ConnectRequest::Handshake => {
            return protonerf::FieldType::Message;
        }
        ConnectRequest::Paths => {
            return protonerf::FieldType::Message;
        }
        ConnectRequest::Principal => {
            return protonerf::FieldType::Message;
        }
        ConnectRequest::Timeout => {
            return protonerf::FieldType::Message;
        }
        ConnectRequest::Shortcut => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ConnectResponse {
  Ok = 1,
  Handshake = 2,
  Route = 3,
  Paths = 4,
  Error = 5,
}

export fn ConnectResponseTypes (usize index) -> protonerf::FieldType {
    switch index {
        ConnectResponse::Ok => {
            return protonerf::FieldType::Message;
        }
        ConnectResponse::Handshake => {
            return protonerf::FieldType::Message;
        }
        ConnectResponse::Route => {
            return protonerf::FieldType::Message;
        }
        ConnectResponse::Paths => {
            return protonerf::FieldType::Message;
        }
        ConnectResponse::Error => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ClusterShard {
  This = 1,
  Other = 2,
}

export fn ClusterShardTypes (usize index) -> protonerf::FieldType {
    switch index {
        ClusterShard::This => {
            return protonerf::FieldType::Message;
        }
        ClusterShard::Other => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ExceptionalRoute {
  Identity = 1,
  This = 2,
  Other = 3,
  Blocked = 4,
}

export fn ExceptionalRouteTypes (usize index) -> protonerf::FieldType {
    switch index {
        ExceptionalRoute::Identity => {
            return protonerf::FieldType::Message;
        }
        ExceptionalRoute::This => {
            return protonerf::FieldType::Message;
        }
        ExceptionalRoute::Other => {
            return protonerf::FieldType::Message;
        }
        ExceptionalRoute::Blocked => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ClusterConfig {
  Shards = 1,
  ExceptionalRoutes = 2,
  Epoch = 3,
  DefaultShadowPublisherLimit = 4,
  DefaultShadowTrafficLimit32 = 5,
}

export fn ClusterConfigTypes (usize index) -> protonerf::FieldType {
    switch index {
        ClusterConfig::Shards => {
            return protonerf::FieldType::Message;
        }
        ClusterConfig::ExceptionalRoutes => {
            return protonerf::FieldType::Message;
        }
        ClusterConfig::Epoch => {
            return protonerf::FieldType::Message;
        }
        ClusterConfig::DefaultShadowPublisherLimit => {
            return protonerf::FieldType::Message;
        }
        ClusterConfig::DefaultShadowTrafficLimit32 => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ClusterState {
  Config = 1,
}

export fn ClusterStateTypes (usize index) -> protonerf::FieldType {
    switch index {
        ClusterState::Config => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum TraceRequest {
  Target = 1,
}

export fn TraceRequestTypes (usize index) -> protonerf::FieldType {
    switch index {
        TraceRequest::Target => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum TraceShadow {
  Xaddress = 1,
  PublisherCount = 2,
  PublisherSoftLimit = 3,
  PublisherHardLimit = 4,
  TrafficEpoch64 = 5,
  TrafficLimit64 = 6,
}

export fn TraceShadowTypes (usize index) -> protonerf::FieldType {
    switch index {
        TraceShadow::Xaddress => {
            return protonerf::FieldType::Message;
        }
        TraceShadow::PublisherCount => {
            return protonerf::FieldType::Message;
        }
        TraceShadow::PublisherSoftLimit => {
            return protonerf::FieldType::Message;
        }
        TraceShadow::PublisherHardLimit => {
            return protonerf::FieldType::Message;
        }
        TraceShadow::TrafficEpoch64 => {
            return protonerf::FieldType::Message;
        }
        TraceShadow::TrafficLimit64 => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum TraceResponse {
  Publishing = 1,
  Epoch = 2,
  RxBytes32 = 3,
  TxBytes32 = 4,
  LastSeen = 5,
  FirstSeen = 6,
  Allocation = 7,
  Brokerip = 8,
  PktsSent = 9,
  PktsLost = 10,
  Rtt = 11,
}

export fn TraceResponseTypes (usize index) -> protonerf::FieldType {
    switch index {
        TraceResponse::Publishing => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::Epoch => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::RxBytes32 => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::TxBytes32 => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::LastSeen => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::FirstSeen => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::Allocation => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::Brokerip => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::PktsSent => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::PktsLost => {
            return protonerf::FieldType::Message;
        }
        TraceResponse::Rtt => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum PeerConnectRequest {
  Identity = 1,
  Timestamp = 2,
  Handshake = 3,
  Route = 4,
  Paths = 5,
}

export fn PeerConnectRequestTypes (usize index) -> protonerf::FieldType {
    switch index {
        PeerConnectRequest::Identity => {
            return protonerf::FieldType::Message;
        }
        PeerConnectRequest::Timestamp => {
            return protonerf::FieldType::Message;
        }
        PeerConnectRequest::Handshake => {
            return protonerf::FieldType::Message;
        }
        PeerConnectRequest::Route => {
            return protonerf::FieldType::Message;
        }
        PeerConnectRequest::Paths => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum PeerConnectResponse {
  Ok = 1,
  Handshake = 2,
  Paths = 3,
  Error = 4,
}

export fn PeerConnectResponseTypes (usize index) -> protonerf::FieldType {
    switch index {
        PeerConnectResponse::Ok => {
            return protonerf::FieldType::Message;
        }
        PeerConnectResponse::Handshake => {
            return protonerf::FieldType::Message;
        }
        PeerConnectResponse::Paths => {
            return protonerf::FieldType::Message;
        }
        PeerConnectResponse::Error => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ProtoHeader {
  Len = 1,
}

export fn ProtoHeaderTypes (usize index) -> protonerf::FieldType {
    switch index {
        ProtoHeader::Len => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export fn EmptyTypes (usize index) -> protonerf::FieldType {
    switch index {
    }
    return protonerf::FieldType::Skip;
}


export enum Confirmation {
  Ok = 1,
  Error = 2,
}

export fn ConfirmationTypes (usize index) -> protonerf::FieldType {
    switch index {
        Confirmation::Ok => {
            return protonerf::FieldType::Message;
        }
        Confirmation::Error => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum MoveInstruction {
  Ipaddr = 1,
  Xaddr = 2,
}

export fn MoveInstructionTypes (usize index) -> protonerf::FieldType {
    switch index {
        MoveInstruction::Ipaddr => {
            return protonerf::FieldType::Message;
        }
        MoveInstruction::Xaddr => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum InnerTraceRequest {
  Invalid = 1,
  Ping = 2,
}

export fn InnerTraceRequestTypes (usize index) -> protonerf::FieldType {
    switch index {
        InnerTraceRequest::Invalid => {
            return protonerf::FieldType::Message;
        }
        InnerTraceRequest::Ping => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum InnerTraceResponse {
  Invalid = 1,
  Pong = 2,
}

export fn InnerTraceResponseTypes (usize index) -> protonerf::FieldType {
    switch index {
        InnerTraceResponse::Invalid => {
            return protonerf::FieldType::Message;
        }
        InnerTraceResponse::Pong => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ClaimOne {
  Target = 1,
  Resources = 2,
}

export fn ClaimOneTypes (usize index) -> protonerf::FieldType {
    switch index {
        ClaimOne::Target => {
            return protonerf::FieldType::Message;
        }
        ClaimOne::Resources => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum ClaimAll {
  Shadow = 1,
  Resources = 2,
}

export fn ClaimAllTypes (usize index) -> protonerf::FieldType {
    switch index {
        ClaimAll::Shadow => {
            return protonerf::FieldType::Message;
        }
        ClaimAll::Resources => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Revoker {
  Identity = 1,
}

export fn RevokerTypes (usize index) -> protonerf::FieldType {
    switch index {
        Revoker::Identity => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Claim {
  Opt = 1,
  One = 2,
  All = 3,
  Revoker = 4,
}

export fn ClaimTypes (usize index) -> protonerf::FieldType {
    switch index {
        Claim::Opt => {
            return protonerf::FieldType::Message;
        }
        Claim::One => {
            return protonerf::FieldType::Message;
        }
        Claim::All => {
            return protonerf::FieldType::Message;
        }
        Claim::Revoker => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Certificate {
  LastValidEpoch = 1,
  Identity = 2,
  Authority = 3,
  Serial = 4,
  Claims = 5,
}

export fn CertificateTypes (usize index) -> protonerf::FieldType {
    switch index {
        Certificate::LastValidEpoch => {
            return protonerf::FieldType::Message;
        }
        Certificate::Identity => {
            return protonerf::FieldType::Message;
        }
        Certificate::Authority => {
            return protonerf::FieldType::Message;
        }
        Certificate::Serial => {
            return protonerf::FieldType::Message;
        }
        Certificate::Claims => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum CertificateRequest {
  LastValidEpoch = 1,
  Identity = 2,
  Claims = 3,
}

export fn CertificateRequestTypes (usize index) -> protonerf::FieldType {
    switch index {
        CertificateRequest::LastValidEpoch => {
            return protonerf::FieldType::Message;
        }
        CertificateRequest::Identity => {
            return protonerf::FieldType::Message;
        }
        CertificateRequest::Claims => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Authorization {
  Identity = 1,
  Resource = 2,
}

export fn AuthorizationTypes (usize index) -> protonerf::FieldType {
    switch index {
        Authorization::Identity => {
            return protonerf::FieldType::Message;
        }
        Authorization::Resource => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum AuthorizationList {
  A = 1,
}

export fn AuthorizationListTypes (usize index) -> protonerf::FieldType {
    switch index {
        AuthorizationList::A => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum DiscoveryResponse {
  CarrierRevision = 1,
  CarrierBuildId = 2,
  Application = 3,
  ApplicationVersion = 4,
  Paths = 5,
}

export fn DiscoveryResponseTypes (usize index) -> protonerf::FieldType {
    switch index {
        DiscoveryResponse::CarrierRevision => {
            return protonerf::FieldType::Message;
        }
        DiscoveryResponse::CarrierBuildId => {
            return protonerf::FieldType::Message;
        }
        DiscoveryResponse::Application => {
            return protonerf::FieldType::Message;
        }
        DiscoveryResponse::ApplicationVersion => {
            return protonerf::FieldType::Message;
        }
        DiscoveryResponse::Paths => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Uname {
  Sysname = 1,
  Nodename = 2,
  Release = 3,
  Version = 4,
  Machine = 5,
}

export fn UnameTypes (usize index) -> protonerf::FieldType {
    switch index {
        Uname::Sysname => {
            return protonerf::FieldType::Message;
        }
        Uname::Nodename => {
            return protonerf::FieldType::Message;
        }
        Uname::Release => {
            return protonerf::FieldType::Message;
        }
        Uname::Version => {
            return protonerf::FieldType::Message;
        }
        Uname::Machine => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Load {
  Avg1 = 1,
  Avg5 = 2,
  Avg15 = 3,
  Clock = 4,
  Uptime = 5,
  Idletime = 6,
  ProcActive = 7,
  ProcTotal = 8,
  Cores = 9,
  Threads = 10,
}

export fn LoadTypes (usize index) -> protonerf::FieldType {
    switch index {
        Load::Avg1 => {
            return protonerf::FieldType::Message;
        }
        Load::Avg5 => {
            return protonerf::FieldType::Message;
        }
        Load::Avg15 => {
            return protonerf::FieldType::Message;
        }
        Load::Clock => {
            return protonerf::FieldType::Message;
        }
        Load::Uptime => {
            return protonerf::FieldType::Message;
        }
        Load::Idletime => {
            return protonerf::FieldType::Message;
        }
        Load::ProcActive => {
            return protonerf::FieldType::Message;
        }
        Load::ProcTotal => {
            return protonerf::FieldType::Message;
        }
        Load::Cores => {
            return protonerf::FieldType::Message;
        }
        Load::Threads => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Mem {
  Total = 1,
  Free = 2,
  Available = 3,
}

export fn MemTypes (usize index) -> protonerf::FieldType {
    switch index {
        Mem::Total => {
            return protonerf::FieldType::Message;
        }
        Mem::Free => {
            return protonerf::FieldType::Message;
        }
        Mem::Available => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum FileSystem {
  Path = 1,
  Blocksize = 2,
  Total = 3,
  Free = 4,
}

export fn FileSystemTypes (usize index) -> protonerf::FieldType {
    switch index {
        FileSystem::Path => {
            return protonerf::FieldType::Message;
        }
        FileSystem::Blocksize => {
            return protonerf::FieldType::Message;
        }
        FileSystem::Total => {
            return protonerf::FieldType::Message;
        }
        FileSystem::Free => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Firmware {
  Board = 1,
  Distro = 2,
  Release = 3,
  Revision = 4,
  Builder = 5,
  Finger = 6,
  AndroidApiLevel = 7,
}

export fn FirmwareTypes (usize index) -> protonerf::FieldType {
    switch index {
        Firmware::Board => {
            return protonerf::FieldType::Message;
        }
        Firmware::Distro => {
            return protonerf::FieldType::Message;
        }
        Firmware::Release => {
            return protonerf::FieldType::Message;
        }
        Firmware::Revision => {
            return protonerf::FieldType::Message;
        }
        Firmware::Builder => {
            return protonerf::FieldType::Message;
        }
        Firmware::Finger => {
            return protonerf::FieldType::Message;
        }
        Firmware::AndroidApiLevel => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum NetAddress {
  Addr = 1,
  Mask = 2,
  Broadcast = 3,
}

export fn NetAddressTypes (usize index) -> protonerf::FieldType {
    switch index {
        NetAddress::Addr => {
            return protonerf::FieldType::Message;
        }
        NetAddress::Mask => {
            return protonerf::FieldType::Message;
        }
        NetAddress::Broadcast => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Netdev__Duplex {
  Invalid = 0,
  Half = 1,
  Full = 2,
}

export enum Netdev {
  Name = 1,
  RxPkt = 2,
  RxErr = 3,
  TxPkt = 4,
  TxErr = 5,
  Up = 6,
  Macaddr = 7,
  Mtu = 8,
  Addrs = 9,
  Link = 10,
  LinkChanges = 11,
  LinkSpeed = 12,
  LinkDuplex = 13,
}

export fn NetdevTypes (usize index) -> protonerf::FieldType {
    switch index {
        Netdev::Name => {
            return protonerf::FieldType::Message;
        }
        Netdev::RxPkt => {
            return protonerf::FieldType::Message;
        }
        Netdev::RxErr => {
            return protonerf::FieldType::Message;
        }
        Netdev::TxPkt => {
            return protonerf::FieldType::Message;
        }
        Netdev::TxErr => {
            return protonerf::FieldType::Message;
        }
        Netdev::Up => {
            return protonerf::FieldType::Message;
        }
        Netdev::Macaddr => {
            return protonerf::FieldType::Message;
        }
        Netdev::Mtu => {
            return protonerf::FieldType::Message;
        }
        Netdev::Addrs => {
            return protonerf::FieldType::Message;
        }
        Netdev::Link => {
            return protonerf::FieldType::Message;
        }
        Netdev::LinkChanges => {
            return protonerf::FieldType::Message;
        }
        Netdev::LinkSpeed => {
            return protonerf::FieldType::Message;
        }
        Netdev::LinkDuplex => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum SwitchPort {
  Port = 1,
  Link = 2,
  Speed = 3,
  Network = 4,
  Device = 5,
  None = 6,
}

export fn SwitchPortTypes (usize index) -> protonerf::FieldType {
    switch index {
        SwitchPort::Port => {
            return protonerf::FieldType::Message;
        }
        SwitchPort::Link => {
            return protonerf::FieldType::Message;
        }
        SwitchPort::Speed => {
            return protonerf::FieldType::Message;
        }
        SwitchPort::Network => {
            return protonerf::FieldType::Message;
        }
        SwitchPort::Device => {
            return protonerf::FieldType::Message;
        }
        SwitchPort::None => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Switch {
  Name = 1,
  Ports = 2,
}

export fn SwitchTypes (usize index) -> protonerf::FieldType {
    switch index {
        Switch::Name => {
            return protonerf::FieldType::Message;
        }
        Switch::Ports => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Dualboot {
  ActiveSide = 1,
}

export fn DualbootTypes (usize index) -> protonerf::FieldType {
    switch index {
        Dualboot::ActiveSide => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Belltower {
  Current = 1,
  Previous = 2,
}

export fn BelltowerTypes (usize index) -> protonerf::FieldType {
    switch index {
        Belltower::Current => {
            return protonerf::FieldType::Message;
        }
        Belltower::Previous => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Sysinfo {
  Uname = 1,
  Mem = 2,
  Load = 3,
  Firmware = 4,
  Fs = 5,
  Net = 6,
  Switch = 7,
  BoardId = 8,
  CarrierBuildId = 9,
  Belltower = 10,
  Dualboot = 11,
}

export fn SysinfoTypes (usize index) -> protonerf::FieldType {
    switch index {
        Sysinfo::Uname => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::Mem => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::Load => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::Firmware => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::Fs => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::Net => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::Switch => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::BoardId => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::CarrierBuildId => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::Belltower => {
            return protonerf::FieldType::Message;
        }
        Sysinfo::Dualboot => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum WifiStation {
  Address = 1,
  Inactive = 2,
  RxBytes = 3,
  RxPackets = 4,
  TxBytes = 5,
  TxPackets = 6,
  TxRetries = 7,
  TxFailed = 8,
  BeaconLoss = 9,
  BeaconRx = 10,
  RxDropMisc = 11,
  Signal = 12,
  SignalAvg = 13,
  BeaconSignalAvg = 14,
  TxBitrate = 15,
  RxBitrate = 16,
  RxDuration = 17,
  Expected = 18,
  Authorized = 19,
  Authenticated = 20,
  Associated = 21,
  Preamble = 22,
  Wmm = 23,
  Mfp = 24,
  Tdls = 25,
  Dtim = 26,
  BeaconInterval = 27,
  ShortPreamble = 28,
  ShortSlotTime = 29,
  ConnectedTime = 30,
}

export fn WifiStationTypes (usize index) -> protonerf::FieldType {
    switch index {
        WifiStation::Address => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Inactive => {
            return protonerf::FieldType::Message;
        }
        WifiStation::RxBytes => {
            return protonerf::FieldType::Message;
        }
        WifiStation::RxPackets => {
            return protonerf::FieldType::Message;
        }
        WifiStation::TxBytes => {
            return protonerf::FieldType::Message;
        }
        WifiStation::TxPackets => {
            return protonerf::FieldType::Message;
        }
        WifiStation::TxRetries => {
            return protonerf::FieldType::Message;
        }
        WifiStation::TxFailed => {
            return protonerf::FieldType::Message;
        }
        WifiStation::BeaconLoss => {
            return protonerf::FieldType::Message;
        }
        WifiStation::BeaconRx => {
            return protonerf::FieldType::Message;
        }
        WifiStation::RxDropMisc => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Signal => {
            return protonerf::FieldType::Message;
        }
        WifiStation::SignalAvg => {
            return protonerf::FieldType::Message;
        }
        WifiStation::BeaconSignalAvg => {
            return protonerf::FieldType::Message;
        }
        WifiStation::TxBitrate => {
            return protonerf::FieldType::Message;
        }
        WifiStation::RxBitrate => {
            return protonerf::FieldType::Message;
        }
        WifiStation::RxDuration => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Expected => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Authorized => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Authenticated => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Associated => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Preamble => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Wmm => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Mfp => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Tdls => {
            return protonerf::FieldType::Message;
        }
        WifiStation::Dtim => {
            return protonerf::FieldType::Message;
        }
        WifiStation::BeaconInterval => {
            return protonerf::FieldType::Message;
        }
        WifiStation::ShortPreamble => {
            return protonerf::FieldType::Message;
        }
        WifiStation::ShortSlotTime => {
            return protonerf::FieldType::Message;
        }
        WifiStation::ConnectedTime => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum WifiInterface {
  Name = 1,
  Typ = 2,
  Phy = 3,
  Ssid = 4,
  Channel = 5,
  Txpower = 6,
  Stations = 7,
}

export fn WifiInterfaceTypes (usize index) -> protonerf::FieldType {
    switch index {
        WifiInterface::Name => {
            return protonerf::FieldType::Message;
        }
        WifiInterface::Typ => {
            return protonerf::FieldType::Message;
        }
        WifiInterface::Phy => {
            return protonerf::FieldType::Message;
        }
        WifiInterface::Ssid => {
            return protonerf::FieldType::Message;
        }
        WifiInterface::Channel => {
            return protonerf::FieldType::Message;
        }
        WifiInterface::Txpower => {
            return protonerf::FieldType::Message;
        }
        WifiInterface::Stations => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum DhcpLease {
  Ts = 1,
  Mac = 2,
  Ip = 3,
  Name = 4,
}

export fn DhcpLeaseTypes (usize index) -> protonerf::FieldType {
    switch index {
        DhcpLease::Ts => {
            return protonerf::FieldType::Message;
        }
        DhcpLease::Mac => {
            return protonerf::FieldType::Message;
        }
        DhcpLease::Ip => {
            return protonerf::FieldType::Message;
        }
        DhcpLease::Name => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Arp__HwType {
  Unknown = 0,
  Ethernet = 1,
}

export enum Arp {
  Ip = 1,
  Hw = 2,
  Mac = 3,
  Dev = 4,
  Value = 5,
  Null = 6,
}

export fn ArpTypes (usize index) -> protonerf::FieldType {
    switch index {
        Arp::Ip => {
            return protonerf::FieldType::Message;
        }
        Arp::Hw => {
            return protonerf::FieldType::Message;
        }
        Arp::Mac => {
            return protonerf::FieldType::Message;
        }
        Arp::Dev => {
            return protonerf::FieldType::Message;
        }
        Arp::Value => {
            return protonerf::FieldType::Message;
        }
        Arp::Null => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum NetRoute {
  Destination = 1,
  Gateway = 2,
  Source = 3,
}

export fn NetRouteTypes (usize index) -> protonerf::FieldType {
    switch index {
        NetRoute::Destination => {
            return protonerf::FieldType::Message;
        }
        NetRoute::Gateway => {
            return protonerf::FieldType::Message;
        }
        NetRoute::Source => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum NetSurvey {
  Wifi = 1,
  Dhcp = 2,
  Arp = 3,
  Routes = 4,
}

export fn NetSurveyTypes (usize index) -> protonerf::FieldType {
    switch index {
        NetSurvey::Wifi => {
            return protonerf::FieldType::Message;
        }
        NetSurvey::Dhcp => {
            return protonerf::FieldType::Message;
        }
        NetSurvey::Arp => {
            return protonerf::FieldType::Message;
        }
        NetSurvey::Routes => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum LocationAccuracity {
  Hdop = 1,
  Vdop = 2,
  Pdop = 3,
}

export fn LocationAccuracityTypes (usize index) -> protonerf::FieldType {
    switch index {
        LocationAccuracity::Hdop => {
            return protonerf::FieldType::Message;
        }
        LocationAccuracity::Vdop => {
            return protonerf::FieldType::Message;
        }
        LocationAccuracity::Pdop => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Satellite__Constellation {
  Unknown = 0,
  Galileo = 1,
  Gps = 2,
  Glonass = 3,
}

export enum Satellite {
  Constellation = 1,
  Prn = 2,
  Elevation = 3,
  Azimuth = 4,
  Snr = 5,
  Fix = 6,
}

export fn SatelliteTypes (usize index) -> protonerf::FieldType {
    switch index {
        Satellite::Constellation => {
            return protonerf::FieldType::Message;
        }
        Satellite::Prn => {
            return protonerf::FieldType::Message;
        }
        Satellite::Elevation => {
            return protonerf::FieldType::Message;
        }
        Satellite::Azimuth => {
            return protonerf::FieldType::Message;
        }
        Satellite::Snr => {
            return protonerf::FieldType::Message;
        }
        Satellite::Fix => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum LocationVelocity {
  Course = 1,
  Speed = 2,
}

export fn LocationVelocityTypes (usize index) -> protonerf::FieldType {
    switch index {
        LocationVelocity::Course => {
            return protonerf::FieldType::Message;
        }
        LocationVelocity::Speed => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Location__Fix {
  None = 0,
  Gps = 1,
  DGps = 2,
  Pps = 3,
  Rtk = 4,
  FloatRtk = 5,
  Estimated = 6,
  Manual = 7,
  Simulation = 8,
}

export enum Location {
  Latitude = 1,
  Longitude = 2,
  Altitude = 3,
  Fix = 4,
  Accuracity = 5,
  Satellites = 6,
  Velocity = 7,
}

export fn LocationTypes (usize index) -> protonerf::FieldType {
    switch index {
        Location::Latitude => {
            return protonerf::FieldType::Message;
        }
        Location::Longitude => {
            return protonerf::FieldType::Message;
        }
        Location::Altitude => {
            return protonerf::FieldType::Message;
        }
        Location::Fix => {
            return protonerf::FieldType::Message;
        }
        Location::Accuracity => {
            return protonerf::FieldType::Message;
        }
        Location::Satellites => {
            return protonerf::FieldType::Message;
        }
        Location::Velocity => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Sensor__ValueType {
  None = 0,
  MilliCelsius = 1,
}

export enum Sensor {
  Name = 1,
  Vtype = 2,
  Value = 3,
}

export fn SensorTypes (usize index) -> protonerf::FieldType {
    switch index {
        Sensor::Name => {
            return protonerf::FieldType::Message;
        }
        Sensor::Vtype => {
            return protonerf::FieldType::Message;
        }
        Sensor::Value => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum Sensors {
  Sensors = 1,
}

export fn SensorsTypes (usize index) -> protonerf::FieldType {
    switch index {
        Sensors::Sensors => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export fn NoneTypes (usize index) -> protonerf::FieldType {
    switch index {
    }
    return protonerf::FieldType::Skip;
}


export fn AuthorizationGetTypes (usize index) -> protonerf::FieldType {
    switch index {
    }
    return protonerf::FieldType::Skip;
}


export enum AuthorizationAdd {
  Identity = 1,
  Path = 2,
}

export fn AuthorizationAddTypes (usize index) -> protonerf::FieldType {
    switch index {
        AuthorizationAdd::Identity => {
            return protonerf::FieldType::Message;
        }
        AuthorizationAdd::Path => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum AuthorizationDel {
  Identity = 1,
}

export fn AuthorizationDelTypes (usize index) -> protonerf::FieldType {
    switch index {
        AuthorizationDel::Identity => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum InteractiveAuth {
  Otp = 1,
}

export fn InteractiveAuthTypes (usize index) -> protonerf::FieldType {
    switch index {
        InteractiveAuth::Otp => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum NetworkJoin {
  Secret = 1,
}

export fn NetworkJoinTypes (usize index) -> protonerf::FieldType {
    switch index {
        NetworkJoin::Secret => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export fn NetworkGetTypes (usize index) -> protonerf::FieldType {
    switch index {
    }
    return protonerf::FieldType::Skip;
}


export enum ConfigResult {
  Ok = 1,
  Error = 2,
}

export fn ConfigResultTypes (usize index) -> protonerf::FieldType {
    switch index {
        ConfigResult::Ok => {
            return protonerf::FieldType::Message;
        }
        ConfigResult::Error => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum AuthListResult {
  Auth = 1,
}

export fn AuthListResultTypes (usize index) -> protonerf::FieldType {
    switch index {
        AuthListResult::Auth => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum NetworkGetResult {
  Address = 2,
}

export fn NetworkGetResultTypes (usize index) -> protonerf::FieldType {
    switch index {
        NetworkGetResult::Address => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum GenesisCurrent {
  Sha256 = 1,
  Commit = 2,
  Data = 3,
  Stable = 4,
}

export fn GenesisCurrentTypes (usize index) -> protonerf::FieldType {
    switch index {
        GenesisCurrent::Sha256 => {
            return protonerf::FieldType::Message;
        }
        GenesisCurrent::Commit => {
            return protonerf::FieldType::Message;
        }
        GenesisCurrent::Data => {
            return protonerf::FieldType::Message;
        }
        GenesisCurrent::Stable => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


export enum GenesisUpdate {
  Sha256 = 1,
  PreviousSha256 = 2,
  Commit = 3,
  Data = 4,
}

export fn GenesisUpdateTypes (usize index) -> protonerf::FieldType {
    switch index {
        GenesisUpdate::Sha256 => {
            return protonerf::FieldType::Message;
        }
        GenesisUpdate::PreviousSha256 => {
            return protonerf::FieldType::Message;
        }
        GenesisUpdate::Commit => {
            return protonerf::FieldType::Message;
        }
        GenesisUpdate::Data => {
            return protonerf::FieldType::Message;
        }
    }
    return protonerf::FieldType::Skip;
}


