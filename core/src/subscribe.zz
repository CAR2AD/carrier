using <string.h>::{memcpy};
using <assert.h>::{assert};
using err;
using channel;
using router;
using bootstrap;
using io::unix;
using net;
using io;
using time;
using endpoint;
using router;
using hex;
using log;
using pq;
using byteorder;
using identity;
using protonerf;
using stream;
using slice;
using net::address;
using hpack;
using slice::{Slice};
using peering;
using proto;
using noise;
using responder;

static stream::Config SubscribeConfig = stream::Config {
    path:   "/carrier.broker.v1/broker/subscribe",
    stream: on_stream,
    close:  on_close,
};

export closure identity_change_event_cb(Subscribe mut*self, identity::Identity *id, stream::Stream mut *st);

export struct Subscribe {
    identity_change_event_cb on_publish;
    identity_change_event_cb on_unpublish;
}

export fn start(endpoint::Endpoint mut*self, err::Err+et mut*e, Subscribe mut new *ss)
    where err::checked(*e)
{
    stream::Stream mut* streami = self->broker()->open(e, &SubscribeConfig);
    if err::check(e) { return; }
    static_attest(safe(streami));
    streami->user2 = ss;
}

fn on_close(stream::Stream mut *self, err::Err+et mut*e)
    where err::checked(*e)
{
    log::error("subscribe closed\n");
    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));
    self->chan->endpoint->close();
}

fn on_stream(stream::Stream mut *self, err::Err+et mut*e, Slice bs) -> bool
    where err::checked(*e)
    where slice::slice::integrity(&bs)
{
    Subscribe mut*this = (Subscribe mut*)self->user2;
    static_attest(safe(this));
    static_attest(safe(self->chan));
    if self->state == 0 {
        log::debug("subscribe response headers:");
        new it = hpack::decoder::decode(bs);
        while it.next(e) {
            log::debug("  %.*s: %.*s", it.key.size, it.key.mem, it.val.size, it.val.mem);
        }
        if err::check(e) {
            return false;
        }


        let mut frame = self->chan->q.alloc(e, channel::FrameType::Stream, 100);
        if err::check(e) {
            return false;
        }

        self->state = 1;

        frame.push32(byteorder::to_be32(1)); // stream
        frame.push64(byteorder::to_be64(2)); // order
        frame.push16(0); // size placeholder


        identity::Address mut network ={0};
        static_attest(safe(self->chan));
        static_attest(safe(self->chan->endpoint));
        self->chan->endpoint->vault.get_network(&network);

        protonerf::encode_bytes(frame, e, proto::SubscribeRequest::Shadow, network.k, 32);
        if err::check(e) {
            return false;
        }
    } else if self->state == 1 {
        new iter = protonerf::decode(bs);
        for (protonerf::Field mut field; iter.next(e, &field);) {
            if err::check(e) { return true; }
            if field.a != 0  && field.value.v_len >= 32 {
                static_attest(safe(field.a));
                static_attest(len(field.a) >= field.value.v_len);
                new iter2 = protonerf::decode(slice::slice::Slice { mem: field.a, size: field.value.v_len});
                for (protonerf::Field mut field; iter2.next(e, &field);) {
                    if err::check(e) { return true; }
                    let id = (identity::Identity *)field.a;
                    switch field.index {
                        proto::SubscribeChange::Publish => {
                            if this->on_publish.fn != 0 {
                                static_attest(safe(this->on_publish));
                                this->on_publish(this, id, self);
                            }
                        }
                        proto::SubscribeChange::Unpublish => {
                            if this->on_unpublish.fn != 0 {
                                static_attest(safe(this->on_unpublish));
                                this->on_unpublish(this, id, self);
                            }
                        }
                        default => {}
                    }
                }
            }
        }
    }

    return true;
}

