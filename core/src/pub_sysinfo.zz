using endpoint;
using stream;
using err;
using slice;
using io;
using log;
using hpack;
using buffer;
using time;
using <stdlib.h>::{exit, calloc, free};
using sysinfo;
using revision;
using madpack;
using preshared;

export fn register(endpoint::Endpoint mut*ep)
{
    ep->register_stream(&ConfigSysinfo);
    ep->register_stream(&ConfigSensors);
}
static stream::Config ConfigSysinfo = stream::Config {
    path:       "/v3/carrier.sysinfo.v1/sysinfo",
    open:       sysinfo_open,
    index:      preshared::SYSINFO,
};
static stream::Config ConfigSensors = stream::Config {
    path:       "/v3/carrier.sysinfo.v1/sensors",
    open:       sensors_open,
    index:      preshared::SENSORS,
};

fn sysinfo_open(stream::Stream mut *self, err::Err+et mut*e, slice::Slice headers)
    where slice::slice::integrity(&headers)
    where err::checked(*e)
{
    let mut frame = self->stream(e, 1500);
    if err::check(e) { return; }

    new+512 idx = madpack::from_preshared_index(preshared::sysinfo());
    new enc = madpack::encode(frame, &idx);

    let bi = revision::build_id();
    enc.kv_cstr("build_id", bi);

    enc.kv_map("uname");
    sysinfo::uname(&enc, e);
    if err::check(e) {e->elog(); e->make(); }
    enc.end();

    enc.kv_map("mem");
    sysinfo::mem(&enc, e);
    if err::check(e) {e->elog(); e->make(); }
    enc.end();

    enc.kv_map("cpu");
    sysinfo::cpu(&enc, e);
    if err::check(e) {e->elog(); e->make(); }
    enc.end();

    enc.kv_map("firmware");
    sysinfo::firmware(&enc, e);
    if err::check(e) {e->elog(); e->make(); }
    enc.end();

    self->close();
}

fn sensors_open(stream::Stream mut *self, err::Err+et mut*e, slice::Slice headers)
    where slice::slice::integrity(&headers)
    where err::checked(*e)
{
    self->close();
}
