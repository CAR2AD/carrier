using <stdio.h>::{fprintf, printf, stderr};
using err;
using carrier;
using vault_toml;
using buffer;
using revision;

using cmd_publish;
using cmd_shell;
using cmd_vault;
using cmd_subscribe;
using cmd_stream;

static char * USAGE = "
devguard carrier is a secure message system for IoT

Usage:
    carrier <subcommand>

Subcommands:
    config              change carrier configuration
    identity            print out identity
    vault               vault subcommands
    publish             publish services on carrier
    subscribe           receive network updates
    shell               open a shell
    stream              connect a stream to stdio
";

export fn main(int mut argc, char ** argv) -> int
    where (usize)argc == len(argv)
{

    if argc > 1
    {
        char * arg = argv[1];
        static_attest(nullterm(arg));


        if buffer::cstr_eq(arg, "identity") {
            new+1000  e     = err::make();
            new va = vault_toml::from_home_carriertoml(&e);
            e.abort();

            return cmd_vault::print_identity(&va, argc, argv);
        } else if buffer::cstr_eq(arg, "publish") {
            new+1000  e     = err::make();
            new va = vault_toml::from_home_carriertoml(&e);
            e.abort();

            return cmd_publish::cmd(va, argc, argv);
        } else if buffer::cstr_eq(arg, "shell") {
            return cmd_shell::cmd(argc, argv);
        } else if buffer::cstr_eq(arg, "subscribe") {
            return cmd_subscribe::cmd(argc, argv);
        } else if buffer::cstr_eq(arg, "vault") {
            new+1000  e     = err::make();
            new va = vault_toml::from_home_carriertoml(&e);
            e.abort();

            return cmd_vault::cmd(&va, argc, argv);
        } else if buffer::cstr_eq(arg, "stream") {
            return cmd_stream::cmd(argc, argv);
        } else if buffer::cstr_eq(arg, "get") {
            return cmd_stream::cmd(argc, argv);
        }
    }


    fprintf(stderr, "carrier %s [zz]", revision::build_id());
    fprintf(stderr, "%s", USAGE);
    return 1;
}
