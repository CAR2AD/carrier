using stream;
using err;
using endpoint;
using slice;
using buffer;
using identity;
using log;
using channel;
using byteorder;
using mem;
using madpack;
using preshared;

static stream::Config AuthGetConfig = stream::Config {
    path:       "/v3/carrier.config.v1/auth_list",
    open:       auth_get,
    index:      preshared::CONFIG,
};

static stream::Config NetGetConfig = stream::Config {
    path:       "/v3/carrier.config.v1/net_get",
    open:       net_get,
    index:      preshared::CONFIG,
};

static stream::Config AuthAddConfig = stream::Config {
    path:       "/v3/carrier.config.v1/auth_add",
    stream:     auth_add_stream,
    index:      preshared::CONFIG,
};

static stream::Config AuthDelConfig = stream::Config {
    path:       "/v3/carrier.config.v1/auth_del",
    stream:     auth_del_stream,
    index:      preshared::CONFIG,
};

static stream::Config NetJoinConfig = stream::Config {
    path:       "/v3/carrier.config.v1/net_join",
    stream:     net_join_stream,
    index:      preshared::CONFIG,
};

export fn register(endpoint::Endpoint mut*ep)
{
    ep->register_stream(&AuthGetConfig);
    ep->register_stream(&AuthAddConfig);
    ep->register_stream(&AuthDelConfig);
    ep->register_stream(&NetGetConfig);
    ep->register_stream(&NetJoinConfig);
}

fn auth_get_cb(void mut * u, identity::Identity *id, char *resource)
    where nullterm(resource)
{
    let enc = (madpack::Encoder mut *)u;
    static_attest(safe(enc));
    static_attest(madpack::integrity(enc));

    new+1000 e = err::make();

    char mut identity_str[64] = {0};
    identity::identity_to_str(&e, identity_str, 64, id);
    if err::check(&e) { e.elog();  return; }

    enc->v_map();
    enc->kv_cstr("identity",     identity_str);
    enc->kv_cstr("path",         resource);
    enc->end();
}

fn auth_get(stream::Stream mut *self, err::Err+e2 mut*e, slice::Slice headers)
    where err::checked(*e)
    where slice::slice::integrity(&headers)
{
    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));

    slice::MutSlice mut frame = self->stream(e, 500);
    if err::check(e) { return; }

    new+512 idx = madpack::from_preshared_index(preshared::config());
    new mad = madpack::encode(frame, &idx);
    mad.kv_array("auth");
    self->chan->endpoint->vault.list_authorizations(e, auth_get_cb, &mad);
    mad.end();

    self->close();
}

fn net_get(stream::Stream mut *self, err::Err+et mut*e, slice::Slice headers)
    where err::checked(*e)
    where slice::slice::integrity(&headers)
{
    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));
    let mut frame = self->stream(e, 128);
    if err::check(e) { return; }

    identity::Address mut addr = {0};
    self->chan->endpoint->vault.get_network(&addr);
    char mut buf[64] = {0};
    identity::address_to_str(e, buf, 64, &addr);
    if err::check(e) { return; }

    new+512 idx = madpack::from_preshared_index(preshared::config());
    new mad = madpack::encode(frame, &idx);
    mad.kv_cstr("address", buf);

    self->close();
}

fn return_ok(stream::Stream mut *self, err::Err+et mut*e) -> bool
    where err::checked(*e)
{
    let frame = self->stream(e, 20);
    if err::check(e) {
        return false;
    }

    new+512 idx = madpack::from_preshared_index(preshared::config());
    new mad = madpack::encode(frame, &idx);
    mad.kv_bool("ok", true);
    mad.end();

    self->close();
    return true;
}

fn return_err(stream::Stream mut *self, err::Err+et mut*e) -> bool
{
    static_attest(buffer::integrity(&e->trace, et));
    let ch  = e->trace.cstr();
    static_attest(safe(ch));
    let mut chl = buffer::strlen(ch);
    if chl >  500 {
        chl = 500;
    }

    new+100 e2 = err::make();
    let frame = self->stream(&e2, 20 + chl);
    if err::check(&e2) {
        e2.elog();
        return false;
    }

    new+512 idx = madpack::from_preshared_index(preshared::config());
    new mad = madpack::encode(frame, &idx);
    mad.kv_bool("ok", false);
    mad.kv_map("error");
    mad.kv_uint("code", e->error);
    mad.kv_array("trace");
    mad.v_strslice(slice::slice::Slice{
        mem:    (u8*)ch,
        size:   chl,
    });
    mad.end();
    mad.end();


    self->close();
    return true;
}

fn auth_add_stream(stream::Stream mut *self, err::Err+ex mut*e, slice::Slice msg) -> bool
    where err::checked(*e)
    where slice::slice::integrity(&msg)
{
    return auth_add_del_stream(self, e, msg, 1);
}

fn auth_del_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice msg) -> bool
    where err::checked(*e)
    where slice::slice::integrity(&msg)
{
    return auth_add_del_stream(self, e, msg, 2);
}

fn auth_add_del_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice msg, int impl) -> bool
    where err::checked(*e)
    where slice::slice::integrity(&msg)
{
    identity::Identity mut addme = {0};
    new+256 mut path = buffer::make();
    // prover doesnt advance path temporal :(

    new+512 idx = madpack::from_preshared_index(preshared::config());
    new dc = madpack::decode(msg, &idx);
    while dc.next_kv() {
        if dc.key.eq_cstr("identity") && dc.item == madpack::Item::String {
            static_attest(slice::slice::integrity(&dc.value.v_slice));
            identity::identity_from_str(&addme, e, (char*)dc.value.v_slice.mem, dc.value.v_slice.size);
            if err::check(e) {
                return return_err(self, e);
            }
        } else if dc.key.eq_cstr("path") && dc.item == madpack::Item::String {
            static_attest(slice::slice::integrity(&dc.value.v_slice));
            path.clear();
            path.append_slice(dc.value.v_slice);
        }
        dc.skip()
    }

    if path.slen() == 0 || identity::isnull(addme.k) {
        err::fail(e, err::InvalidArgument, "identity or path is null");
        return return_err(self, e);
    }

    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));
    if impl == 1 {
        self->chan->endpoint->vault.add_authorization(e, &addme, path.cstr());
    } else if impl == 2 {
        self->chan->endpoint->vault.del_authorization(e, &addme, path.cstr());
    }
    if err::check(e) {
        return return_err(self, e);
    }

    return return_ok(self, e);
}

fn net_join_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice msg) -> bool
    where err::checked(*e)
    where slice::slice::integrity(&msg)
{
    identity::Secret mut nusecret = {0};

    new+512 idx = madpack::from_preshared_index(preshared::config());
    new dc = madpack::decode(msg, &idx);
    while dc.next_kv() {
        if dc.key.eq_cstr("secret") && dc.item == madpack::Item::String {
            static_attest(slice::slice::integrity(&dc.value.v_slice));
            identity::secret_from_str(&nusecret, e, (char*)dc.value.v_slice.mem, dc.value.v_slice.size);
            if err::check(e) {
                return return_err(self, e);
            }
        }
        dc.skip()
    }

    if identity::isnull(nusecret.k) {
        err::fail(e, err::InvalidArgument, "secret is null");
        return return_err(self, e);
    }

    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));

    self->chan->endpoint->vault.set_network(e, &nusecret);

    if err::check(e) {
        return return_err(self, e);
    }

    log::warn("network changed. restart endpoint to take effect");
    self->chan->endpoint->shutdown(e);
    if err::check(e) {
        return return_err(self, e);
    }

    return return_ok(self, e);
}
