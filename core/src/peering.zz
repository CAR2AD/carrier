/// this will eventually maintain the best path given multiple options


using <stdio.h>::{printf};
using net::address;
using err;
using log;
using slice;
using madpack;

export enum Transport {
    Tcp,
    Udp,
}

export enum Class {
    Invalid         = 0,
    Local           = 1,
    Internet        = 2,
    BrokerOrigin    = 3,
}

export struct Path {
    Transport           transport;
    address::Address    addr;
    Class               klass;
    bool                active;
    bool                used;
}

export struct Peering {
    Path paths[16];
}

export fn received(Peering mut *self, Transport transport, address::Address addr, Class klass) {
    for (usize mut i = 0; i < static(len(self->paths));i++) {
        if self->paths[i].addr.eq(&addr) {
            return;
        }
        if !self->paths[i].used {
            self->paths[i].transport    = transport;
            self->paths[i].addr         = addr;
            self->paths[i].klass        = klass;
            self->paths[i].used         = true;
            self->paths[i].active       = true;
            return;
        }
    }
}

export fn from_madpack(Peering mut *self, err::Err mut*e, madpack::Decoder mut *mad)
    where err::checked(*e)
{
    while mad->next_v(e) {
        static_attest(err::checked(*e));
        if mad->item == madpack::Item::End {
            break;
        } else if mad->item == madpack::Item::Map {
            address::Address mut ip = {0};
            Class mut cat = Class::Invalid;
            while mad->next_kv(e) {
                if mad->item == madpack::Item::End {
                    break;
                } else if mad->key.eq_cstr("ipaddr") && mad->item == madpack::Item::String {
                    address::from_str(&ip, (char*)mad->value.v_slice.mem, mad->value.v_slice.size);
                    if ip.valid() {
                        log::debug("path: %.*s", mad->value.v_slice.size, mad->value.v_slice.mem);
                    } else {
                        log::debug("cannot parse path: %.*s", mad->value.v_slice.size, mad->value.v_slice.mem);
                    }
                } else if mad->key.eq_cstr("category") && mad->item == madpack::Item::String {
                    if mad->value.v_slice.eq_cstr("local") {
                        cat = Class::Local;
                    } else if mad->value.v_slice.eq_cstr("internet") {
                        cat = Class::Local;
                    } else if mad->value.v_slice.eq_cstr("broker") {
                        cat = Class::BrokerOrigin;
                    }
                }
            }
            if ip.valid() {
                self->received(Transport::Udp, ip, cat);
            }
        } else {
            mad->skip(e);
        }
    }
}
