using cipher;
using symmetric;
using <stdio.h>::{printf, fprintf, stderr};
using err;
using hex;
using byteorder;
using pq;
using mem;
using crc8;
using <string.h>::{memset};
using buffer;
using peering;
using log;
using stream;
using endpoint;
using slice;
using io;
using router;
using time;
using hpack;
using revision;
using vault;
using identity;
using pool;
using <string.h>::{memcpy};
using madpack;
using preshared;

export symbol InvalidFrame;

export enum FrameType {
    Ack         = 1,
    Ping        = 2,
    Disconnect  = 3,
    Open        = 4,
    Stream      = 5,
    Close       = 6,
    Configure   = 7,
    Fragmented  = 8,
}


// move around pre-initialized channel without the whole memory bag
pub struct Transfer {
    u8      version;
    u32     revision;
    u64     route;
    bool    responder;

    cipher::CipherState mut c_mine;
    cipher::CipherState mut c_them;

    u64 rtt;
    u64 counter_out;
    u8  outgoing_acks_at;
}

pub fn from_transfer (Channel mut new*self, Transfer tr)
{
    self->version   = tr.version;
    self->revision  = tr.revision;
    self->route     = tr.route;
    self->responder = tr.responder;
    self->c_mine    = tr.c_mine;
    self->c_them    = tr.c_them;
    self->q.rtt     = tr.rtt;
    self->q.revision = tr.revision;
    self->counter_out  = tr.counter_out;
    self->outgoing_acks_at = tr.outgoing_acks_at;
}

pub fn transfer_from_symmetric(symmetric::SymmetricState * symm, u8 version, u32 revision, u64 route, bool responder) -> Transfer {
    Transfer mut c = Transfer {
        route:      route,
        responder:  responder,
        version:    version,
        revision:   revision,
    };

    if responder {
        symmetric::split(symm, &c.c_them, &c.c_mine);
    } else {
        symmetric::split(symm, &c.c_mine, &c.c_them);
    }

    c.counter_out = 1;

    // why was this 1?!
    c.outgoing_acks_at = 0;

    return c;
}


export struct Channel {
    identity::Identity peer;
    vault::Vault mut* store;
    endpoint::Endpoint  mut* endpoint;

    u8      version;
    u32     revision;
    u64     route;
    bool    responder;
    u64     mut counter_out;
    bool    this_is_the_broker_channel;

    // don't catch errors. let them bubble to the top
    bool errors_are_fatal;

    cipher::CipherState mut c_mine;
    cipher::CipherState mut c_them;
    pq::Q+64            mut q;
    io::Io              mut timer;

    u32                 mut streamidcounter;

    //TODO ideally we'd want to have 2 owned stream memory banks here, and 16 shared
    //     but this is something zz should provide as high level datastructure
    stream::Stream mut *mut streams[16];
    peering::Peering    mut peering;

    u64 mut outgoing_acks[32];
    u8  mut outgoing_acks_at;
}

pub fn shutdown(Channel mut* self, err::Err mut*e)
    where err::checked(*e)
{
    for (usize mut i = 0 ; i < static(len(self->streams)); i++) {
        if self->streams[i] != 0 {
            stream::Stream mut* strx = self->streams[i];
            static_attest(safe(strx));
            strx->close();
        }
    }

    self->clean_closed(e);
    if err::check(e) { e->elog(); e->ignore(); }
    //TODO send disconnect frame
}

export fn open(Channel mut* self, err::Err mut*e, stream::Config *conf) -> stream::Stream mut *
    where err::checked(*e)
    where safe(conf->path)
    where nullterm(conf->path)
    model (return == 0) ||  safe(return)
{
    new extraheaders = slice::slice::empty();
    return open_with_headers(self, e, conf, extraheaders);
}

export fn open_with_headers(Channel mut* self, err::Err mut*e, stream::Config *conf, slice::Slice extraheaders) -> stream::Stream mut *
    where err::checked(*e)
    where safe(conf->path)
    where nullterm(conf->path)
    where slice::slice::integrity(&extraheaders)
    model (return == 0) ||  safe(return)
{
    let r = self->alloc_stream(1 + self->streamidcounter * 2, conf);
    if r == 0 {
        err::fail(e, err::OutOfTail, "oom");
        return 0;
    }
    static_attest(safe(r));

    err::assert(extraheaders.size < 10000);
    let framesize = 100 + extraheaders.size;

    let mut frame = self->q.alloc(e, FrameType::Open, framesize);
    if err::check(e) {
        r->id = 0;
        return 0;
    }

    frame.push32(byteorder::to_be32(r->id)); // stream
    frame.push16(0); // size placeholder

    static_attest(nullterm(conf->path));
    static_attest(safe(conf->path));
    hpack::encoder::encode(frame, e, (u8*)":path",5 , (u8*)conf->path, buffer::strlen(conf->path));
    if err::check(e) {
        r->id = 0;
        return 0;
    }

    frame.append_slice(extraheaders);

    self->streamidcounter += 1;
    return r;
}

pub fn cleanup(Channel mut* self, err::Err mut*e)
    where err::checked(*e)
{
    for (usize mut i = 0 ; i < static(len(self->streams)); i++) {
        if self->streams[i] != 0 {
            stream::Stream mut* strx = self->streams[i];
            static_attest(safe(strx));
            let config = strx->config;
            static_attest(safe(config));
            if config->close.fn != 0 {
                static_attest(safe(config->close));
                config->close(strx, e);
                if err::check(e) {
                    if strx->errors_are_fatal {
                        return;
                    } else {
                        e->elog();
                        e->ignore();
                    }
                }
            }

            static_attest(safe(self->endpoint));
            static_attest(pool::member(strx, &self->endpoint->streampool));
            self->endpoint->streampool.free(strx);
            self->streams[i] = 0;
        }
    }
    self->q.clear();
}

pub fn alloc_stream(Channel mut* self, u32 streamid, stream::Config * unsafe config) -> stream::Stream mut * {
    static_attest(safe(self->endpoint));
    static_attest(pool::continuous(self->endpoint->streampool));

    for (usize mut i = 0 ; i < static(len(self->streams)); i++) {
        if self->streams[i] == 0 {
            let strx = (stream::Stream mut*)self->endpoint->streampool.alloc();
            if strx == 0 {
                log::warn("streampool alloc failed");
                return 0;
            }
            static_attest(safe(strx));

            strx->id = streamid;
            strx->order_outgoing  = 2;
            strx->config = config;
            strx->chan   = self;

            self->streams[i] = strx;
            return strx;
        }
    }
    log::warn("too many streams");
    return 0;
}

pub fn stream_exists(Channel mut* self, u32 streamid) -> bool {
    for (usize mut i = 0 ; i < static(len(self->streams)); i++) {
        if self->streams[i] != 0 {
            let strx = self->streams[i];
            static_attest(safe(strx));
            if strx->id == streamid {
                return true;
            }
        }
    }
    return false;
}


pub fn send_close_frame(Channel mut* self, err::Err mut *e, u32 streamid, u64 order)
    where err::checked(*e)
{
    slice::MutSlice mut frame = self->q.alloc(e, FrameType::Close, 16);
    if err::check(e) {
        e->ignore();
        return;
    }

    frame.push32(byteorder::to_be32(streamid)); // stream
    frame.push64(byteorder::to_be64(order)); // order

    if self->version >= 0x09 {
        frame.push(0); //TODO set reason
    }
}

fn clean_closed(Channel mut* self, err::Err mut *e)
    where err::checked(*e)
{
    let now = time::tick();

    for (usize mut i = 0 ; i < static(len(self->streams)); i++) {
        if self->streams[i] == 0 {
            continue;
        }
        let strx = self->streams[i];
        static_attest(safe(strx));

        if strx->closing {
            if strx->closed_linger_until == 0 {
                strx->closed_linger_until = now.to_seconds() + 1;

                self->send_close_frame(
                        e,
                        strx->id,
                        strx->order_outgoing
                        );
                if err::check(e) {
                    e->elog();
                    e->ignore();
                }

                if strx->config != 0 {
                    static_attest(safe(strx->config));
                    stream::close_fn cb = strx->config->close;
                    if cb.fn != 0 {
                        static_attest(safe(cb));

                        // note that user code is supposed to delete its resources here
                        // so we may never call any user function on this stream again
                        // including config actually
                        cb(strx, e);
                    }

                    if err::check(e) {
                        if strx->errors_are_fatal {
                            // DO NOT RETURN. dealloc must run
                        } else {
                            log::error("OH GOD THIS BAD");

                            e->elog();
                            e->ignore();
                        }
                    }
                }
            } else if now.to_seconds() > strx->closed_linger_until {
                strx->cleanup();
                static_attest(safe(self->endpoint));
                static_attest(pool::member(strx, &self->endpoint->streampool));
                self->endpoint->streampool.free(strx);
                self->streams[i] = 0;
            }
        }
    }
}


fn disconnect(Channel mut* this, err::Err mut* e)
    where err::checked(*e)
{
    endpoint::Endpoint mut * ep = (endpoint::Endpoint mut *)this->endpoint;
    err::assert_safe(ep);
    ep->statem.connected.disconnect(e, this->route);
}


pub fn poll(Channel mut* self, err::Err mut* e, io::Async mut* async, buffer::Buffer mut* buf) -> io::Result
    where err::checked(*e)
    where buffer::integrity(buf)
    where buf->size  >= 4 + 8 + 8 + 320
{
    // poll user streams
    for (usize mut i = 0 ; i < static(len(self->streams)); i++) {
        if self->streams[i] != 0 {
            stream::Stream mut* strx = self->streams[i];
            static_attest(safe(strx));
            strx->do_poll(e, async);
            if err::check(e) {
                return io::Result::Error;
            }
        }
    }

    self->clean_closed(e);
    if err::check(e) {
        return io::Result::Error;
    }


    if self->timer.valid() {
        self->timer.close();
    }

    let now_t = time::tick();
    let now = now_t.to_millis();
    let tlp = self->q.keepalive(now);
    if tlp == 0 {
        log::error("[%lu] connection is dead", self->route);
        disconnect(self, e);
        if err::check(e) { return io::Result::Error; }
        return io::Result::Later;
    }


    //log::debug("[%lu] next timer in %lu", self->route, tlp);

    self->timer = io::timeout(async, e, time::from_millis(tlp));
    if err::check(e) {
        return io::Result::Error;
    }
    async->select(e, &self->timer, io::Ready::Read);
    if err::check(e) {
        return io::Result::Error;
    }


    u64 counter_be = byteorder::to_be64(self->counter_out + 1 /* rust version has an off by one*/);
    u8* counter_b = (u8*)&counter_be;

    u64 mut route   = self->route;
    u8 mut* mut route_b = (u8 mut*)&route;
    if self->responder {
        unsafe {
            route_b[7] |= 0b00000001;
        }
    }

    // version 1B
    buf->mem[0] = 0x09;
    // reserved 3B
    buf->mem[1] = 0x00;
    buf->mem[2] = 0x00;
    buf->mem[3] = 0x00;

    unsafe {
        mem::copy(route_b,      buf->mem + 4,     8);
        mem::copy(counter_b,    buf->mem + 4 + 8, 8);
    }

    buf->at = 4 + 8 + 8;
    usize unencrypted_size = buf->at;

    //broken header crc
    buf->mem[buf->at] = (char)crc8::broken_crc8(0, (u8*)buf->mem, 4 + 8 + 8);
    buf->at += 1;

    //flags
    buf->mem[buf->at] = 0x00;
    buf->at += 1;

    //payload size
    u16 mut * payload_size = (u16 mut*)(buf->mem + buf->at);
    buf->at += 2;


    usize size_before_payload = buf->at;


    // all outgoing acks will fit in because 32 * 8 = 256
    // if they did not, we would need a fifo
    if self->outgoing_acks_at > 0 {

        // frame type
        buf->mem[buf->at] = 0x01;
        buf->at += 1;

        // ack delay
        buf->mem[buf->at ]       = 0x00;
        buf->mem[buf->at + 1]   = 0x01;
        buf->at += 2;

        // number of acks
        buf->mem[buf->at ]     = 0x00;
        buf->mem[buf->at+ 1]   = (char)self->outgoing_acks_at;
        buf->at += 2;

        //TODO acks must be sorted
        static_attest(len(self->outgoing_acks) > self->outgoing_acks_at);
        for (usize mut i = 0; i < (usize)self->outgoing_acks_at ; i++) {
            err::assert(buf->at < buf->size);
            u64 ackd  = byteorder::to_be64((self->outgoing_acks)[i]);
            unsafe {
                mem::copy(&ackd, buf->mem + buf->at , 8);
            }
            buf->at += 8;
        }
        self->outgoing_acks_at = 0;
    }

    // deque some frames
    static_attest(len(buf->mem) > buf->at);
    if buf->size - buf->at > 16 {
        buf->at += self->q.send(now, (u8 mut*)buf->mem + buf->at, buf->size - buf->at -16, self->counter_out);
    }


    // nothing in the packet
    if buf->at - size_before_payload < 1 {
        return io::Result::Later;
    }

    (*payload_size) = byteorder::to_be16(buf->at - size_before_payload);

    // padding to %64
    buf->at += 64 - ((buf->at + 16) % 64);
    if buf->at > buf->size- 16{
        buf->at = buf->size - 16;
    }

    usize padded_size = buf->at     - unencrypted_size;
    usize budget      = buf->size   - unencrypted_size;


    u8* plaintext = (u8*)buf->mem + 4 + 8 + 8;
    static_attest(safe(plaintext));



    u8 mut* ciphertext = (u8 mut*)buf->mem + unencrypted_size;
    static_attest(safe(ciphertext));

    static_attest(len(ciphertext) >= padded_size);
    static_attest(len(ciphertext) >= budget);
    static_attest(buf->at < len(buf->mem));

    //log::debug("pkt before encrypt:");
    //hex::dump((u8*)buf->mem, buf->at);


    usize cipherlen = cipher::encrypt(
        &(self->c_mine),
        e,
        plaintext,
        padded_size,
        self->counter_out,
        ciphertext,
        budget
    );

    if err::check(e) {
        return io::Result::Error;
    }

    self->counter_out += 1;

    buf->at = unencrypted_size + cipherlen;
    return io::Result::Ready;
}



fn handle_open_frame(Channel mut* self, err::Err mut* e, u32 streamid, slice::Slice header_slice) -> bool /*resend*/
    where err::checked(*e)
    where slice::slice::integrity(&header_slice)
{
    new+128 path = buffer::make();
    new it = hpack::decoder::decode(header_slice);
    while it.next(e) {
        if it.key.eq_cstr(":path") {
            path.clear();
            static_attest(safe(it.val.mem));
            path.append_bytes(it.val.mem, it.val.size);
        }
    }
    if err::check(e) {
        return false;
    }

    err::assert_safe(self->endpoint);

    stream::Config ** mut registry = self->endpoint->p2p_stream_registry;
    usize mut registry_len = static(len(self->endpoint->p2p_stream_registry));
    if self->this_is_the_broker_channel {
        registry        = self->endpoint->broker_stream_registry;
        registry_len    = static(len(self->endpoint->broker_stream_registry));
    }
    static_attest(len(registry)         >= registry_len);

    let mut accepted = false;

    let mut response_header = self->q.alloc(e, FrameType::Stream, 30);
    if err::check(e) {
        e->elog();
        e->ignore();
        return true;
    }
    response_header.push32(byteorder::to_be32(streamid)); // stream
    response_header.push64(byteorder::to_be64(1)); // order
    response_header.push16(0); // size placeholder

    if path.eq_cstr("/v3/carrier.discovery.v1/discover") {
        hpack::encoder::encode(response_header, e, (u8*)":status", 7, (u8*)"200",   3);
        e->abort();
        accepted = true;
        self->disco(e, streamid);
        if err::check(e) {
            e->elog();
            e->ignore();
            return true;
        }
    } else if path.slen() > 0 && (self->this_is_the_broker_channel ||
            self->endpoint->vault.authorize_open_stream(&self->peer, path.cstr())) {

        for (usize mut i = 0; i < registry_len; i++) {
            stream::Config * mut conf = registry[i];
            if conf == 0 {
                break;
            }
            static_attest(safe(conf));
            err::assert_safe(conf->path);
            static_attest(nullterm(conf->path));


            if path.eq_cstr(conf->path) {
                accepted = true;

                static_attest(slice::slice::integrity(&conf->index));
                // TODO send only when peer doesnt have it
                if conf->index.size > 0 {

                    self->q.cancel();
                    response_header = self->q.alloc(e, FrameType::Stream, 40 + conf->index.size);
                    if err::check(e) {
                        e->elog();
                        e->ignore();
                        return true;
                    }
                    response_header.push32(byteorder::to_be32(streamid)); // stream
                    response_header.push64(byteorder::to_be64(1)); // order
                    response_header.push16(0); // size placeholder

                    hpack::encoder::encode(response_header, e, (u8*)"index", 5, conf->index.mem, conf->index.size);
                    e->abort();
                }

                stream::Stream mut* streami = self->alloc_stream(streamid, conf);
                if streami == 0 {
                    hpack::encoder::encode(response_header, e, (u8*)":status", 7, (u8*)"500",   3);
                    e->abort();
                    self->send_close_frame(e, streamid, 2);
                    e->ignore();
                    log::warn("max streams");
                    return false;
                } else {
                    static_attest(safe(streami));
                    streami->order_incomming = 1;

                    if conf->open.fn != 0  {
                        static_attest(safe(conf->open));
                        conf->open(streami, e, header_slice);
                        if err::check(e) {
                            e->elog();
                            e->ignore();
                            hpack::encoder::encode(response_header, e, (u8*)":status", 7, (u8*)"500",   3);
                            if err::check(e) { e->ignore(); }
                            streami->close();
                        } else {
                            hpack::encoder::encode(response_header, e, (u8*)":status", 7, (u8*)"200",   3);
                        }
                    } else {
                        hpack::encoder::encode(response_header, e, (u8*)":status", 7, (u8*)"200",   3);
                    }

                }
                break;
            }
        }
    }

    if !accepted {
        log::warn("[%llu] no service accepts path '%s'", self->route, path.cstr());
        hpack::encoder::encode(response_header, e, (u8*)":status", 7, (u8*)"404", 3);
        e->abort();
        self->send_close_frame(e, streamid, 2);
        if err::check(e) {
            e->elog();
            e->ignore();
        }
    }

    return false;
}


pub fn push(Channel mut* self, err::Err mut* e, u8 mut* mut body, usize l, u64 counter, u8 version)
    where err::checked(*e)
    where len(body) >= l
    where l > 16
{

    // counter is offset by one in the rust implementation
    u64 realcounter = counter - 1;

    usize plainlen = cipher::decrypt(
        &(self->c_them),
        e,
        body,
        l,
        realcounter,
        body,
        l
    );
    if err::check(e) {
        return;
    }

    // broken crc and flags 2B
    if version >= 9 {
        body = body + 2;
    }

    // payload len 2B
    usize mut frames_len;
    unsafe {frames_len = byteorder::from_be16(*(u16*)(body)) }
    u8 *frames = body + 2;
    if frames_len >= plainlen - 4 {
        err::fail(e, InvalidFrame, "corrupt");
        return;
    }


    //log::debug("incomming frames");
    //static_attest(len(frames) > frames_len);
    //hex::dump(frames, frames_len);

    // non-ack frames require an ack to be sent
    bool mut ack_required  = false;
    // transient failure, tell the remote to resend
    bool mut please_resend = false;

    for (usize mut i = 0; i < frames_len; ) {
        static_attest(i < len(frames));
        static_attest(i < len(body));
        u8 frametype = frames[i];
        i++;
        switch frametype {
            0x00 => {}
            FrameType::Ack => {
                if i + 2 + 2  >= frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }
                static_attest(i < len(frames));

                u16 mut delay = 0;
                memcpy(&delay,  frames + i, 2);
                delay = byteorder::from_be16(delay);

                i += 2;

                static_attest(i < len(frames));
                u16 mut b_count;
                memcpy(&b_count,  frames + i, 2);
                usize count = (usize)byteorder::from_be16(b_count);
                i += 2;

                if i + 8 * count > frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }

                for (usize mut j = 0; j < count; j++) {
                    static_attest(i < len(frames));
                    static_attest(i < len(frames) - 8);
                    u64 mut ackorder;
                    memcpy(&ackorder,  frames + i, 8);
                    ackorder = byteorder::from_be64(ackorder);
                    i += 8;

                    // acks are off by one in original rust impl
                    ackorder -= 1;


                    log::debug("[%lu] received ack %lu", self->route, ackorder);

                    let now = time::tick();
                    self->q.ack(now.to_millis(), ackorder);
                }
            }
            FrameType::Ping => {
                ack_required = true;

                log::debug("[%lu] received ping frame", self->route);
                if err::check(e) {
                    return;
                }
            }
            FrameType::Disconnect => {
                ack_required = true;

                log::warn("[%lu] received disconnect frame", self->route);
                //TODO
            }
            FrameType::Open => {
                ack_required = true;
                if i + 4 + 2  >= frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }

                static_attest(i < len(frames));
                u32 mut streamid;
                memcpy(&streamid, frames + i, 4);
                streamid = byteorder::from_be32(streamid);
                i += 4;

                static_attest(i < len(frames));
                u16   mut size_b;
                memcpy(&size_b, frames + i, 2);
                usize size = (usize)byteorder::from_be16(size_b);
                i += 2;


                if i + size > frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }

                static_attest(i < len(frames));
                u8 * hmem = frames + i;
                static_attest(size < len(hmem));
                new header_slice = slice::slice::make(hmem, size);

                i += size;
                static_attest(i < len(frames));

                if self->stream_exists(streamid) {
                    log::debug("[%lu] received open stream=%u (DUP)", self->route, streamid, size);
                } else {
                    log::debug("[%lu] received open stream=%u, size=%zu", self->route, streamid, size);
                    if self->handle_open_frame(e, streamid, header_slice) {
                        please_resend = true;
                    }
                    if err::check(e) {
                        return;
                    }
                }
            }
            FrameType::Stream => {
                ack_required = true;
                if i + 4 + 8 + 2  > frames_len {
                    err::fail(e, InvalidFrame, "short read. %d > %d", i + 4 + 8 + 2, frames_len);
                    return;
                }

                static_attest(i < len(frames));
                u32 mut streamid;
                memcpy(&streamid, frames + i, 4);
                streamid = byteorder::from_be32(streamid);
                i += 4;

                static_attest(i < len(frames));
                u64 mut order;
                memcpy(&order, frames + i, 8);
                order = byteorder::from_be64(order);
                i += 8;

                static_attest(i < len(frames));
                u16 mut size_b;
                memcpy(&size_b, frames + i, 2);
                usize size    = (usize)byteorder::from_be16(size_b);
                i += 2;

                log::debug("[%u] received stream frame for stream=%u, order=%u, size=%u",
                    (uint)self->route, (uint)streamid, (uint)order, (uint)size);

                if i > frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }
                if i + size > frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }
                static_attest(len(frames) > i);
                static_attest(len(frames +i) > size);



                let mut found_channel = false;
                for (usize mut j =0 ; j < static(len(self->streams)); j++) {
                    if self->streams[j] == 0 {
                        continue;
                    }
                    stream::Stream mut*strx = self->streams[j];
                    static_attest(safe(strx));

                    if strx->id == streamid {
                        found_channel = true;
                        new bs = slice::slice::make(frames + i, size);
                        let accepted = strx->incomming_stream(
                            e,
                            order,
                            bs
                        );
                        if err::check(e) {
                            if strx->errors_are_fatal {
                                please_resend = true;
                                return;
                            } else {
                                e->elog();
                                e->ignore();
                                please_resend = true;
                            }
                        } else if !accepted {
                            //TODO send backpressure signal
                            log::warn("stream %u ordering is backpressured at position %u, unable to accept %u",
                                (uint)streamid, (uint)strx->order_incomming, (uint)order);
                            please_resend = true;
                        }
                    }
                }
                if !found_channel {
                    log::warn("frame for unknown stream %zu",streamid);
                    self->send_close_frame(e, streamid, 2);
                    if err::check(e) {
                        e->ignore();
                    }
                }

                i += size;
                static_attest(i <= len(frames));


            }
            FrameType::Close => {
                ack_required = true;
                if self->version >= 0x09 {
                    if i + 4 + 8 + 1  > frames_len {
                        err::fail(e, InvalidFrame, "[%lu] short read",  self->route);
                        return;
                    }
                } else {
                    if i + 4 + 8  > frames_len {
                        err::fail(e, InvalidFrame, "[%lu] short read",  self->route);
                        return;
                    }
                }
                static_attest(i < len(frames));
                u32 mut streamid;
                memcpy(&streamid, frames + i, 4);
                streamid = byteorder::from_be32(streamid);
                i += 4;

                static_attest(i < len(frames));
                u64 mut order;
                memcpy(&order, frames + i, 8);
                order = byteorder::from_be64(order);
                i += 8;
                static_attest(i < len(frames));

                if self->version >= 0x09 {
                    u8 reason = *(frames + i);
                    i += 1;
                    static_attest(i <= len(frames));
                }

                log::debug("[%lu] received close for stream=%u, order=%u", self->route, streamid, order);

                for (usize mut i =0 ; i < static(len(self->streams)); i++) {
                    if self->streams[i] == 0 {
                        continue;
                    }
                    let strx = self->streams[i];
                    static_attest(safe(strx));

                    if strx->id == streamid {
                        static_attest(len(frames) > i);
                        bool accepted = strx->incomming_close(
                            e,
                            order
                        );
                        if err::check(e) {
                            return;
                        }
                        if !accepted {
                            log::warn("stream %u ordering is backpressured at position %u, unable to accept %u",
                                streamid, strx->order_incomming, order);
                            please_resend = true;
                        }
                    }
                }
            }
            FrameType::Configure => {
                ack_required = true;
                if i + 3  > frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }
                static_attest(i < len(frames));
                //flags
                i += 1;

                static_attest(i < len(frames));
                usize size    = (usize)byteorder::from_be16(*(u16*)(frames + i));

                if i + size > frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }

                i += size;
                static_attest(len(frames) > i);
            }
            FrameType::Fragmented => {
                ack_required = true;
                if i + 4 + 8 + 4  > frames_len {
                    err::fail(e, InvalidFrame, "short read");
                    return;
                }
                static_attest(i < len(frames));

                u32 mut streamid;
                memcpy(&streamid, frames + i, 4);
                streamid = byteorder::from_be32(streamid);
                i += 4;
                static_attest(i < len(frames));

                u64 mut order;
                memcpy(&order, frames + i, 8);
                order = byteorder::from_be64(order);
                i += 8;
                static_attest(i < len(frames));

                u32 mut fragments;
                memcpy(&fragments, frames + i, 4);
                fragments = byteorder::from_be32(fragments);
                i += 4;
                static_attest(i < len(frames));

                log::debug("[%lu] received fragmented for stream=%u, order=%lu", self->route, streamid, order);


                let mut found_channel = false;
                for (usize mut j =0 ; j < static(len(self->streams)); j++) {
                    if self->streams[j] == 0 {
                        continue;
                    }
                    stream::Stream mut*strx = self->streams[j];
                    static_attest(safe(strx));

                    if strx->id == streamid {
                        found_channel = true;
                        let accepted = strx->incomming_fragmented(
                            e,
                            order,
                            fragments
                        );
                        if err::check(e) {
                            if strx->errors_are_fatal {
                                please_resend = true;
                                return;
                            } else {
                                e->elog();
                                e->ignore();
                                please_resend = true;
                            }
                        } else if !accepted {
                            //TODO send backpressure signal
                            log::warn("stream %u ordering is backpressured at position %lu, unable to accept %lu",
                                streamid, strx->order_incomming, order);
                            please_resend = true;
                        }
                    }
                }
                if !found_channel {
                    log::warn("fragmented for unknown stream %zu",streamid);
                    self->send_close_frame(e, streamid, 2);
                    if err::check(e) {
                        e->ignore();
                    }
                }


            }
            default => {
                err::fail(e, InvalidFrame, "invalid frame %u", body[i]);
                return;
            }
        }
        //log::debug("[%lu] end of frames", self->route);
    }
    if ack_required && !please_resend {
        ack(self, e, counter);
    }
}

pub fn ack(Channel mut* self, err::Err mut* e, u64 ackd) {
    log::debug("ack packet %u", (uint)ackd);
    if (usize)self->outgoing_acks_at < (usize)sizeof(self->outgoing_acks) {
        static_attest((usize)self->outgoing_acks_at < len(self->outgoing_acks));
        (self->outgoing_acks)[(usize)self->outgoing_acks_at] = ackd;
        self->outgoing_acks_at+=1;
    } else {
        log::error("outgoing ack buffer overflow");
    }
}

fn disco(Channel mut* self, err::Err mut* e, u32 stream_id)
    where err::checked(*e)
{
    usize mut memneeded = 0;
    err::assert_safe(self->endpoint);
    for (usize mut i = 0; i < static(len(self->endpoint->p2p_stream_registry)); i++) {
        stream::Config * mut conf = self->endpoint->p2p_stream_registry[i];
        if conf == 0 {
            break;
        }
        static_attest(safe(conf));
        err::assert_safe(conf->path);
        static_attest(nullterm(conf->path));
        memneeded += 2 + buffer::strlen(conf->path);
    }

    //header
    memneeded += 4 + 8 + 2;
    // revision
    memneeded += 8;
    // application strings
    static_attest(safe(revision::build_id()));
    static_attest(nullterm(revision::build_id()));
    memneeded += 10 + buffer::strlen(revision::build_id());

    let mut frame2 = self->q.alloc(e, FrameType::Stream, memneeded);
    static_attest(frame2.size >= 20);
    if err::check(e) { return; }
    err::assert(frame2.push32(byteorder::to_be32(stream_id)));
    err::assert(frame2.push64(byteorder::to_be64(2)));
    err::assert(frame2.push16(1));



    new+512 idx = madpack::from_preshared_index(e, preshared::discovery());
    e->abort();
    new mad = madpack::encode(frame2, &idx);

    mad.kv_uint(slice::from_cstr("carrier_revision"), revision::revision());
    mad.kv_cstr(slice::from_cstr("carrier_build_id"), revision::build_id());
    mad.kv_array(slice::from_cstr("paths"));
    for (usize mut i = 0; i < static(len(self->endpoint->p2p_stream_registry)); i++) {
        stream::Config * mut conf = self->endpoint->p2p_stream_registry[i];
        if conf == 0 {
            break;
        }
        static_attest(safe(conf));
        err::assert_safe(conf->path);
        static_attest(nullterm(conf->path));

        if self->this_is_the_broker_channel || !self->endpoint->vault.authorize_open_stream(&self->peer, conf->path) {
            continue;
        }

        mad.v_cstr(conf->path);
    }
    mad.end();

    slice::MutSlice mut frame3 = self->q.alloc(e, FrameType::Close, 16);
    if err::check(e) {
        return;
    }

    frame3.push32(byteorder::to_be32(stream_id)); // stream
    frame3.push64(byteorder::to_be64(3)); // order

    if self->version >= 0x09 {
        frame3.push(0); //TODO set reason
    }

}
