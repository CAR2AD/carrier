using err;
using endpoint;
using identity;
using vault;
using mem;
using sync;
using <stdio.h>::{fprintf, stderr, printf};
using stream;
using cmd_common;
using cmd_config;
using proto;
using protonerf;
using slice;
using hex;
using buffer;
using log;

export fn run_self_net_get(
    err::Err+et mut *e,
    endpoint::Endpoint mut*endpoint,
)
    where err::checked(*e)
{
    identity::Address mut addr= {0};
    endpoint->vault.get_network(&addr);

    if identity::isnull(addr.k) {
    } else {
        char mut buf[64] = {0};
        identity::address_to_str(e, buf, 64, &addr);
        if err::check(e) { return; }
        printf("address = %s\n", buf);
    }
}

export fn run_self_net_join(
    err::Err+et mut *e,
    endpoint::Endpoint mut*endpoint,
    char *net_secret_s
)
    where err::checked(*e)
    where nullterm(net_secret_s)
{
    identity::Secret mut net_secret = {0};
    identity::secret_from_str (&net_secret, e, net_secret_s, buffer::strlen(net_secret_s));
    if err::check(e) {
        e->fail(err::InvalidArgument, "parsing auth add identity from commandline argument");
        return;
    }


    endpoint->vault.set_network(e, &net_secret);
    if err::check(e) {return;}

    run_self_net_get(e, endpoint);
    if err::check(e) {return;}
}

/*
export fn run_remote_net_join(
    err::Err+et mut *e,
    endpoint::Endpoint mut*endpoint,
    identity::Identity *target,
    char *net_secret_s
)
    where err::checked(*e)
    where nullterm(net_secret_s)
{
    new mx = sync::start(e, endpoint);
    if err::check(e) { return; }

    mx.connect(e, target);
    if err::check(e) { return; }

    let stx = mx.open(e, &NetSetStream);
    if err::check(e) { return; }
    static_attest(safe(stx));
    stx->errors_are_fatal = true;

    let frame = stx->stream(e, 64);
    if err::check(e) { return; }

    protonerf::encode_bytes(frame, e, proto::NetworkJoin::Secret, (u8*)net_secret_s, buffer::strlen(net_secret_s));
    if err::check(e) { return; }

    mx.wait(e);
    if err::check(e) { return; }
}

static stream::Config NetSetStream = stream::Config {
    path:   "/v2/carrier.config.v1/net_join",
    stream: cmd_config::on_result_stream,
    close:  on_close,
};

export fn run_remote_net_get(
    err::Err+et mut *e,
    endpoint::Endpoint mut*endpoint,
    identity::Identity *target,
)
    where err::checked(*e)
{
    new mx = sync::start(e, endpoint);
    if err::check(e) { return; }

    mx.connect(e, target);
    if err::check(e) { return; }

    mx.open(e, &NetGetStream);
    if err::check(e) { return; }

    mx.wait(e);
    if err::check(e) { return; }
}

static stream::Config NetGetStream = stream::Config {
    path:   "/v2/carrier.config.v1/net_get",
    stream: on_stream,
    close:  on_close,
};

fn on_stream(stream::Stream mut *self, err::Err+et mut*e, slice::Slice msg) -> bool
    where slice::slice::integrity(&msg)
    where err::checked(*e)
{
    if self->state == 0 {
        self->state = 1;
        return cmd_common::on_stream_want_header_200(self, e, msg);
    } else {
        self->state = 2;

        new mut decoder = protonerf::decode(msg);
        for (protonerf::Field mut field; decoder.next(e, &field);) {
            if err::check(e) { return true; }

            switch field.index {
                proto::NetworkGetResult::Address => {
                    if field.a != 0 {
                        static_attest(safe(field.a));
                        static_attest(len(field.a) > field.value.v_len);
                        printf("address = %.*s\n", field.value.v_len, field.a);
                    }
                }
                default => {}
            }

        }
        if err::check(e) { return true; }
        return true;
    }
}

symbol RemoteOpFailed;
fn on_close(stream::Stream mut* self, err::Err+et mut*e)
{
    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));
    self->chan->endpoint->close();
    if self->state <  2 {
        err::fail(e, cmd_config::RemoteOpFailed, "closed early");
    }
}

    */
