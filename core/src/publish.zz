using <stdio.h>::{printf, stdout};
using <string.h>::{memcpy, memset, memcmp};
using <assert.h>::{assert};
using err;
using channel;
using router;
using bootstrap;
using net;
using io;
using time;
using endpoint;
using router;
using hex;
using log;
using pq;
using byteorder;
using identity;
using buffer;
using stream;
using slice;
using net::address;
using hpack;
using slice::{Slice};
using peering;
using noise;
using responder;
using mem;
using madpack;
using preshared;

static stream::Config PublishStream = stream::Config {
    path:   "/carrier.broker.v2/broker/publish",
    stream: stream_to_publish,
    close:  close_publish,
};

export fn publish(endpoint::Endpoint mut*self, err::Err mut*e)
    where err::checked(*e)
{
    self->broker_stream_registry[0] = &PeerConnect;

    stream::Stream mut* streami = self->broker()->open(e, &PublishStream);
    if err::check(e) {
        return;
    }
    static_attest(safe(streami));
    streami->user2 = self;
}

fn close_publish(stream::Stream mut *self, err::Err mut*e) {
    log::error("publish closed\n");
    err::assert_safe(self->chan);
    err::assert_safe(self->chan->endpoint);
    self->chan->endpoint->close();
}

fn stream_to_publish(stream::Stream mut *self, err::Err mut*e, Slice bs) -> bool
    where err::checked(*e)
    where slice::slice::integrity(&bs)
{
    static_attest(safe(self->chan));
    if self->state == 0 {
        self->state = 1;
        log::info("publish response headers:");
        new it = hpack::decoder::decode(bs);
        while it.next(e) {
            log::info("  %.*s: %.*s", it.key.size, it.key.mem, it.val.size, it.val.mem);
        }
        if err::check(e) {
            return false;
        }


        let mut frame = self->stream(e, 100);
        if err::check(e) {
            return false;
        }

        static_attest(safe(self->chan->endpoint));
        identity::Address mut network = {0};
        self->chan->endpoint->vault.get_network(&network);
        identity::Secret mut network_secret = {0};
        self->chan->endpoint->vault.get_network_secret(&network_secret);

        char mut buf[300] = {0};
        identity::address_to_str(e, buf, static(len(buf)), &network);
        if err::check(e) { return false; }

        new+512 idx = madpack::from_preshared_index(e, preshared::publish());
        e->abort();
        new mad = madpack::encode(frame, &idx);
        mad.kv_cstr(slice::from_cstr("address"), buf);

        if self->chan->endpoint->vault.count_authorizations()  == 0 {
            mad.kv_bool(slice::from_cstr("alias"), true);
        }

    } else {
        new+512 idx = madpack::from_preshared_index(e, preshared::publish());
        e->abort();

        new mad = madpack::decode(bs, &idx);
        while mad.next_kv(e) {
            static_attest(err::checked(*e));
            if mad.key.eq_cstr("alias") && mad.item == madpack::Item::Uint{
                new alias = identity::alias_from_u64(mad.value.v_uint);
                char mut to[100] = {0};
                identity::alias_to_str (e, to, static(len(to)), &alias);
                log::info("alias %s", to);
            } else {
                mad.skip(e);
            }
        }

        e->ignore();
        madpack::decode(&mad, bs, &idx);
        printf("publish2: {");
        madpack::to_json(&mad, e, stdout, true, 0, false);
        printf("}\n");
    }

    return true;
}

static stream::Config PeerConnect = stream::Config {
    path:       "/carrier.broker.v2/peer/connect",
    stream:     stream_connect,
};

fn stream_connect(stream::Stream mut *self, err::Err mut*e, slice::Slice msg) -> bool
    where slice::slice::integrity(&msg)
    where err::checked(*e)
{
    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));

    if self->state == 0 {
        self->state = 1;

        identity::Identity  mut principal = {0};
        slice::slice::Slice mut handshake = {0};
        u64 mut route     = 0;
        u64 mut timestamp_expected = 0;

        peering::Peering mut peerings = {0};
        memcpy(&peerings, &self->chan->peering, sizeof(peering::Peering));

        new+512 idx = madpack::from_preshared_index(e, preshared::connect());
        e->abort();

        new mad = madpack::decode(msg, &idx);

        while mad.next_kv(e) {
            static_attest(err::checked(*e));
            static_attest(slice::slice::integrity(&mad.value.v_slice));
            if mad.key.eq_cstr("principal") && mad.item == madpack::Item::Bytes {
                if mad.value.v_slice.size == 32  {
                    mem::copy(mad.value.v_slice.mem, principal.k, 32);
                }
            } else if mad.key.eq_cstr("timestamp") && mad.item == madpack::Item::Uint {
                timestamp_expected = mad.value.v_uint;
            } else if mad.key.eq_cstr("handshake") && mad.item == madpack::Item::Bytes {
                handshake = mad.value.v_slice;
            } else if mad.key.eq_cstr("route") && mad.item == madpack::Item::Uint {
                route = byteorder::to_be64(mad.value.v_uint);
            } else if mad.key.eq_cstr("paths") && mad.item == madpack::Item::Array{
                peerings.from_madpack(e, &mad);
            } else {
                mad.skip(e);
            }
        }
        if err::check(e) {
            self->close();
            return true;
        }

        if handshake.size == 0 || identity::isnull(principal.k) || route == 0 || timestamp_expected == 0 {
            log::error("broker sent incomplete peerconnect2");
            self->close();
            return true;
        }


        // -----------
        // 2. check the handshake packet
        // unfortunate misdesign of signing an entire init packet
        // which actually contains not a lot of interesting information
        static_attest(len(handshake.mem) >= handshake.size);

        if handshake.size < (1 + 3 + 8 + 8 + 64 + 8) {
            err::fail(e, channel::InvalidFrame, "too small");
            self->close();
            return true;
        }

        bool mut require_network_psk = false;

        handshake.mem  = handshake.mem  + (1 + 3 + 8 + 8);
        handshake.size = handshake.size - (1 + 3 + 8 + 8);

        noise::Responder mut rsp = {0};
        identity::secret_generate(&rsp.ephemeral, e);
        if require_network_psk {
            identity::Secret mut network_secret = {0};
            self->chan->endpoint->vault.get_network_secret(&network_secret);
            rsp.receive_insecure(
                (u8*)endpoint::PROLOGUE,
                static(len(endpoint::PROLOGUE) - 1),
                handshake.mem,
                handshake.size - 64,
                network_secret.k, 32
            );
        } else {
            rsp.receive_insecure(
                (u8*)endpoint::PROLOGUE,
                static(len(endpoint::PROLOGUE) - 1),
                handshake.mem,
                handshake.size - 64,
                0,0
            );
        }
        if err::check(e) {
            self->close();
            return true;
        }


        // verify signature over symmetric hash
        u8 mut signme[static(len(endpoint::SIGN_PURPOSE) - 1 + len(rsp.symm.h))] = {0};
        mem::copy(endpoint::SIGN_PURPOSE, signme, buffer::strlen(endpoint::SIGN_PURPOSE));
        u8 mut * m = signme + buffer::strlen(endpoint::SIGN_PURPOSE);
        mem::copy(rsp.symm.h, m, static(len(rsp.symm.h)));

        identity::Signature mut signature = {0};
        mem::copy(handshake.mem + (handshake.size - 64), signature.k, 64);

        if !identity::verify(&principal, &signature, signme, static(len(signme))) {
            err::fail(e, channel::InvalidFrame, "signature verification failed. THIS IS A HACKING ATTEMPT");
            self->close();
            return true;
        }


        // match the handshake identity with what the broker thinks is the identity
        let mut id = handshake;
        id.mem  = id.mem  + 32;
        id.size = 32;
        if !id.eq_bytes(principal.k, 32) {
            err::fail(e, channel::InvalidFrame, "identity mismatch");
            self->close();
            return true;
        }

        static_attest(len(handshake.mem) >= 64 + 8);
        // match the timestamp
        u64 network_time_be = byteorder::to_be64(timestamp_expected);
        if memcmp(handshake.mem + 64, &network_time_be, 8) != 0 {
            err::fail(e, channel::InvalidFrame, "timestamp mismatch");
            self->close();
            return true;
        };



        // get revision, if any
        u32 mut rev = 0;
        if handshake.size >= 32 + 32 + 8 + 4 {
            memcpy(&rev, handshake.mem + 32 + 32 + 8, 4);
            rev = byteorder::from_be32(rev);
        }
        log::info("initiator revision %u", rev);


        self->broker_route = route;



        let authorized = self->chan->endpoint->vault.authorize_connect(&principal);

        if !authorized {

            char mut buff[128] = {0};
            identity::identity_to_str(e, buff, static(len(buff)), &principal);
            e->ignore();
            log::error("UNAUTHORIZED ACCESS FROM %s", buff);
            let mut frame = self->stream(e, 100);
            if err::check(e) {
                return false;
            }
            new mad = madpack::encode(frame, &idx);
            mad.kv_cstr(slice::from_cstr("error"), "not authorized");
            self->close();
            return true;
        }


        // -----------
        // 3. check if we can accept this request
        // the packet is ok from here and will be responded to

        endpoint::Endpoint mut * ep = self->chan->endpoint;
        err::assert_safe(ep);
        let nuchan = ep->statem.connected.next_channel();

        let mut frame = self->stream(e, 300);
        bool mut frameok = true;
        if err::check(e) {
            e->elog();
            frameok = false;
            e->ignore();
        }

        // oom
        if nuchan == 0 || !frameok {
            if nuchan == 0 {
                log::error("cannot accept: max channels");
            } else {
                log::error("cannot accept: max framepool");
            }

            if frameok  {
                self->chan->q.cancel();
                frameok = false;
            }

            let mut frame = self->stream(e, 100);
            if err::check(e) {
                return false;
            }
            new mad = madpack::encode(frame, &idx);
            mad.kv_cstr(slice::from_cstr("error"), "out of mem");
            self->close();
            return true;
        }
        static_attest(safe(nuchan));

        // -----------
        // 4. send connect response header

        // handshake, full packet version 0x08

        new+252 buff = buffer::make();
        let mut buff_sl = buff.as_mut_slice();

        static_attest(safe(self->chan->store));
        responder::accept_insecure(
            &rsp,
            e,
            self->chan->store,
            route,
            timestamp_expected,
            &buff_sl
        );
        if err::check(e) {
            return true;
        }


        new enc = madpack::encode(frame, &idx);
        if !enc.kv_byteslice(slice::from_cstr("handshake"), buff.as_slice()) {
            log::error("OOM WHILE SENDING HANDSHAKE RESPONSE");
        }


        //TODO paths

        buff.clear();
        identity::identity_to_str(e, buff.mem, buff.size, &principal);
        log::info("accepted %s => %lu\n", buff.mem, route);

        channel::from_transfer(nuchan, channel::transfer_from_symmetric(&rsp.symm, 0x08, rev, route, true));
        nuchan->q.allocator = self->chan->q.allocator;
        nuchan->store       = self->chan->store;
        nuchan->endpoint    = self->chan->endpoint;
        memcpy(&nuchan->peer,  &principal, sizeof(identity::Identity));
        memcpy(&nuchan->peering, &peerings, sizeof(peering::Peering));

    } else {
        log::error("unexpected broker message in peer connect");
        hex::dump_slice(msg);
    }
    return true;

}

