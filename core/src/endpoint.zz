using <stdio.h>::{printf};
using <string.h>::{memset, memcpy};
using buffer;
using net::address;
using err;
using byteorder;
using netio::udp;
using netio::tcp;
using time;
using bootstrap;
using identity;
using initiator;
using io;
using netio as net;
using cipher;
using hex;
using channel;
using router;
using peering;
using log;
using pool;
using slice;
using hpack;
using stream;
using noise;
using responder;
using peering;
using vault;
using vault_toml;
using vault_ik;

export const char* PROLOGUE = "carrier has arrived";
export const char* SIGN_PURPOSE = "carrier handshake hash 1";


static u8 FAKE_TLS[] = {0x17, 0x03, 0x03, 0x00, 0x00};


inline using (needs
    vault::Vault,
    Endpoint,
    err::Err,
) "endpoint.h"::{
    os_carrier_endpoint_open,
};


export symbol InvalidBootstrap;

const usize RETRY_EACH_BROKER = 5;

enum State {
    Invalid,
    Connecting,
    Connected,
    Closed,
}

struct ConnectingState {
    vault::Broker           mut current_broker;
    initiator::Initiator    mut initiator;
    buffer::Buffer+1024     mut pkt_in;
    buffer::Buffer+1024     mut pkt_out;
    usize trying_broker_index;
    usize retry_sending;
}

union StateM {
    ConnectingState         connecting;
    router::Router          connected;
}

export struct Endpoint+ {
    vault::Vault            vault;

    initiator::Move         cluster_move;
    identity::Target        cluster_target;

    stream::Config *        broker_stream_registry[2];
    stream::Config *        p2p_stream_registry[32];

    udp::Socket     mut udp4;
    udp::Socket     mut udp6;
    tcp::Socket     mut tcp4;

    io::Io          mut timeout;

    State           mut state;
    StateM          mut statem;

    pool::Pool+1024 mut streampool;
    pool::Pool+     mut framebuffer;
}

export fn start(Endpoint mut* self, err::Err mut*e, io::Async mut* async)
    where err::checked(*e)
{
    self->state = State::Connecting;
    self->do_state_connect(e, async);
}

export fn none(Endpoint mut new* self, usize xt = static(len(self->framebuffer.pmem)))
    where xt > xt/32
{
    memset(self, 0, sizeof(Endpoint));
    self->streampool.make(sizeof(stream::Stream));
    self->framebuffer.make(32, xt);
}

export fn from_secretkit(Endpoint mut new* self, err::Err mut*e, identity::SecretKit ik, usize xt = static(len(self->framebuffer.pmem)))
    where err::checked(*e)
    where xt > xt/32
{
    none(self, xt);
    vault_ik::from_ik(&self->vault, e, ik);
}
export fn from_carriertoml(Endpoint mut new* self, err::Err mut*e, char *file_name, usize xt = static(len(self->framebuffer.pmem)))
    where err::checked(*e)
    where xt > xt/32
    where nullterm(file_name)
{
    none(self, xt);
    vault_toml::from_carriertoml(&self->vault, e, file_name);
}

export fn from_home_carriertoml(Endpoint mut new* self, err::Err mut*e, usize xt = static(len(self->framebuffer.pmem)))
    where err::checked(*e)
    where xt > xt/32
{
    none(self, xt);
    vault_toml::from_home_carriertoml(&self->vault, e);
}

export fn native(Endpoint mut new* self, err::Err mut*e, usize xt = static(len(self->framebuffer.pmem)))
    where err::checked(*e)
    where xt > xt/32
{
    none(self, xt);
    os_carrier_endpoint_open(self, e);
}

export fn from_vault(Endpoint mut new* self, err::Err mut*e, vault::Vault vault, usize xt = static(len(self->framebuffer.pmem)))
    where err::checked(*e)
    where xt > xt/32
{
    none(self, xt);
    self->vault = vault;
}

export fn broker(Endpoint mut* self) -> channel::Channel mut *
    model safe(return)
{
    return &self->statem.connected.channels[0];
}

export fn cluster_target(Endpoint mut* self, identity::Target * target)
{
    memcpy(&self->cluster_target, target, sizeof(identity::Target));
    if target->t == 11 {
        self->cluster_move = initiator::Move::Alias;
    } else {
        self->cluster_move = initiator::Move::Target;
    }
}

export fn do_not_move(Endpoint mut* self)
{
    self->cluster_move = initiator::Move::Never;
}


//TODO send disconnect packet
/// close endpoint immediately
export fn close(Endpoint mut* self)
{
    switch self->state {
        State::Connecting => {
            self->udp4.close();
            self->udp6.close();
            self->tcp4.close();
        }
        State::Connected => {
            self->statem.connected.close();
        }
        default => {
        }
    }
    self->state = State::Closed;
    if self->vault.i_close.fn != 0 {
        static_attest(safe(self->vault.i_close));
        self->vault.i_close(&self->vault);
    }
}


/// gracefully disconnect everything and shutdown
export fn shutdown(Endpoint mut* self, err::Err mut*e)
    where err::checked(*e)
{
    switch self->state {
        State::Connected => {
            self->statem.connected.shutdown(e);
        }
        default => {
            self->close();
        }
    }
}

export fn register_stream(Endpoint mut* self, stream::Config *conf)
{
    for (usize mut i = 0; i < static(len(self->p2p_stream_registry)); i++) {
        if self->p2p_stream_registry[i] == 0 {
            self->p2p_stream_registry[i] = conf;
            return;
        }
    }
}



fn next_broker(Endpoint mut* self) -> bool
{
    for (usize mut i = 0; i < vault::MAX_BROKERS; i++) {
        if self->statem.connecting.trying_broker_index >= vault::MAX_BROKERS {
            self->statem.connecting.trying_broker_index = 0;
        }
        static_attest(self->statem.connecting.trying_broker_index < len(self->vault.broker));
        if self->vault.broker[self->statem.connecting.trying_broker_index].protocol != 0 {
            log::debug("loading broker slot %zu", self->statem.connecting.trying_broker_index);
            memcpy(&self->statem.connecting.current_broker,
                &self->vault.broker[self->statem.connecting.trying_broker_index],
                sizeof(vault::Broker));
            self->statem.connecting.trying_broker_index += 1;
            return true;
        }
        self->statem.connecting.trying_broker_index += 1;
    }
    return false;
}

static u16 PORTS[] = {53, 443, 8443, 80, 123};




fn do_state_connect(Endpoint mut* self, err::Err mut*e, io::Async mut* async)
    where err::checked(*e)
{
    log::debug("trustvector complete, ring has %zu brokers", self->vault.broker_count());

    self->state = State::Connecting;
    memset(&self->statem.connecting, 0, sizeof(ConnectingState));

    new addr4 = address::from_cstr("0.0.0.0:0");
    udp::bind(&self->udp4, e, addr4, async);
    if err::check(e) {
        return;
    }

    new addr6 = address::from_cstr("[::1]:0");
    udp::bind(&self->udp6, e, addr6, async);
    e->ignore();

    if !self->next_broker(){
        err::fail(e, InvalidBootstrap, "no brokers in bootstrap store");
        return;
    }
}

fn do_complete(Endpoint mut* self, err::Err mut*e, peering::Transport trp, address::Address fromaddr) -> bool
    where err::checked(*e)
{
    channel::Transfer mut broker_chan = {0};

    vault::Broker mut redir = {0};

    static_attest(buffer::integrity(&self->statem.connecting.pkt_in));
    let mut udpkt = self->statem.connecting.pkt_in.as_slice();

    if trp == peering::Transport::Tcp {
        if udpkt.size <= static(len(FAKE_TLS)) {
            err::fail(e, channel::InvalidFrame , "too small");
            return true;
        }

        static_attest(static(len(FAKE_TLS)) < len(udpkt.mem));
        udpkt.size = udpkt.size - static(len(FAKE_TLS));
        udpkt.mem  = udpkt.mem  + static(len(FAKE_TLS));
        static_attest(slice::slice::integrity(&udpkt));
    }

    self->statem.connecting.initiator.complete(e, &broker_chan, &redir, udpkt, 0);
    if err::check(e) { return false; }

    if redir.protocol != 0 {
        log::debug("received redirect");
        memcpy(&self->statem.connecting.current_broker, &redir, sizeof(vault::Broker));
        self->statem.connecting.retry_sending = 0;
        self->timeout.close();
        return true;
    } else {
        log::debug("accepted HS");
        self->state = State::Connected;
        memset(&self->statem , 0, sizeof(StateM));
        self->statem.connected.make();
        self->statem.connected.udp4 = self->udp4;
        self->statem.connected.tcp4 = self->tcp4;

        channel::Channel mut* broker_chan_c = self->statem.connected.channels;
        static_attest(safe(broker_chan_c));
        channel::from_transfer(broker_chan_c, broker_chan);
        broker_chan_c->peering.received(trp, fromaddr, peering::Class::Internet);
        broker_chan_c->q.allocator = &self->framebuffer;
        broker_chan_c->store  = &self->vault;
        broker_chan_c->this_is_the_broker_channel = true;
        broker_chan_c->errors_are_fatal = true;

        self->statem.connected.channels[0].endpoint = self;

        return false;
    }
}

export fn poll(Endpoint mut* self, err::Err mut*e, io::Async mut* async) -> io::Result
    where err::checked(*e)
{

    switch self->state {
        State::Connecting => {

            // make sure we always activate
            if io::valid(&self->timeout) {
                async->select(e, &self->timeout, io::Ready::Read);
                if err::check(e) {return io::Result::Error; }
            }
            if io::valid(&self->udp4) {
                async->select(e, &self->udp4, io::Ready::Read);
                if err::check(e) {return io::Result::Error; }
            }
            if io::valid(&self->tcp4) {
                async->select(e, &self->tcp4, io::Ready::Read);
                if err::check(e) {return io::Result::Error; }
            }

            // receive
            address::Address    mut fromaddr = {0};

            self->statem.connecting.pkt_in.make();
            if self->udp4.ctx.valid() && self->udp4.recvfrom(e, &self->statem.connecting.pkt_in, &fromaddr) == io::Result::Ready {
                if err::check(e) {return io::Result::Error; }

                new+100 bufx = buffer::make();
                fromaddr.to_buffer(&bufx);
                log::debug("receiving %zu bytes from udp:%s", self->statem.connecting.pkt_in.at, bufx.cstr());

                bool again = self->do_complete(e, peering::Transport::Udp, fromaddr);
                if err::check(e) {
                    e->elog();
                    e->ignore();
                    // don't return here. we might have stuff to set the timer in the rest of the code
                } else {
                    if again {
                        return self->poll(e, async);
                    } else {
                        return io::Result::Ready;
                    }
                }
            }
            if err::check(e) {return io::Result::Error; }

            if self->tcp4.ctx.valid() {
                switch self->tcp4.recv(e, &self->statem.connecting.pkt_in) {
                    io::Result::Eof => {
                        self->tcp4.close();
                    }
                    io::Result::Ready => {
                        if err::check(e) {return io::Result::Error; }

                        new+100 bufx = buffer::make();
                        self->tcp4.remote_addr.to_buffer(&bufx);
                        log::debug("receiving %zu bytes from tcp:%s", self->statem.connecting.pkt_in.at, bufx.cstr());

                        bool again = self->do_complete(e, peering::Transport::Tcp, self->tcp4.remote_addr);
                        if err::check(e) {
                            e->elog();
                            e->ignore();
                            // don't return here. we might have stuff to set the timer in the rest of the code
                        } else {
                            if again {
                                return self->poll(e, async);
                            } else {
                                return io::Result::Ready;
                            }
                        }
                    }
                    default => {}
                }
            }
            if err::check(e) {return io::Result::Error; }

            // or timeout

            if self->timeout.valid() {
                u8 mut buf[16];
                usize mut l = 16;
                io::Result rr = self->timeout.read_bytes(e, buf, &l);
                if err::check(e) {return io::Result::Error; }
                if rr != io::Result::Ready {
                    return rr;
                }
                log::warn("timeout waiting for broker response");
            }
            self->timeout.close();

            usize mut wait = 0;
            switch self->statem.connecting.retry_sending {
                0       => { wait = 100  }
                1       => { wait = 200  }
                2       => { wait = 400  }
                3       => { wait = 1000 }
                default => { wait = 2000 }
            }

            self->timeout = io::timeout(async, e, time::from_millis(wait));
            if err::check(e) {return io::Result::Error; }
            async->select(e, &self->timeout, io::Ready::Read);
            if err::check(e) {return io::Result::Error; }

            if self->statem.connecting.retry_sending > 6 {
                self->statem.connecting.retry_sending = 0;
                self->next_broker();
            }

            address::Address  mut ip4addr = {0};
            address::Address  mut ip6addr = {0};
            identity::Address mut xaddr   = {0};

            if !bootstrap::from_store(&self->statem.connecting.current_broker, &ip4addr, &ip6addr, &xaddr) {
                err::fail(e, InvalidBootstrap, "current broker is empty");
                return io::Result::Error;
            }

            if self->statem.connecting.retry_sending % 3 == 0 {
                log::debug("resetting crypto state");

                buffer::make(&self->statem.connecting.pkt_out);

                self->statem.connecting.pkt_out.append_bytes(FAKE_TLS, static(len(FAKE_TLS)));

                self->statem.connecting.initiator.initiate(
                    e,
                    true,
                    &self->vault,
                    self->cluster_move,
                    &self->cluster_target,
                    &xaddr,
                    self->vault.vector_time(),
                    self->statem.connecting.pkt_out.as_mut_slice()
                );

                u16 mo = byteorder::to_be16(self->statem.connecting.pkt_out.at - static(len(FAKE_TLS)));
                memcpy(
                    self->statem.connecting.pkt_out.mem + static(len(FAKE_TLS) - 2),
                    &mo,
                    2
                );
                if err::check(e) {return io::Result::Error;}
            }


            let mut udpkt = self->statem.connecting.pkt_out.as_slice();
            static_attest(static(len(FAKE_TLS)) < len(udpkt.mem));
            udpkt.size = udpkt.size - static(len(FAKE_TLS));
            udpkt.mem  = udpkt.mem  + static(len(FAKE_TLS));
            static_attest(slice::slice::integrity(&udpkt));

            new+150 dbn = buffer::make();
            ip4addr.ip_to_buffer(&dbn);
            dbn.append_cstr(" ");
            static_attest(len(&dbn.mem) > dbn.at);
            dbn.at += identity::address_to_str(e, dbn.mem + dbn.at, 150 - dbn.at, &xaddr);
            if err::check(e) {return io::Result::Error; }

            log::debug("attempt %zu sending %zu bytes to %.*s",
                self->statem.connecting.retry_sending,
                udpkt.size,
                (int)dbn.at, dbn.mem);

            ++self->statem.connecting.retry_sending;



            for (usize mut i = 0; i < static(len(PORTS));i++) {
                ip4addr.set_port(PORTS[i]);
                ip6addr.set_port(PORTS[i]);

                self->udp4.sendto(e, udpkt, &ip4addr);
                e->ignore();

                if io::valid(&self->udp6) && ip6addr.valid() {
                    self->udp6.sendto(e, udpkt,  &ip6addr);
                    e->ignore();
                }
           }


            async->select(e, &self->udp4, io::Ready::Read);
            e->ignore();
            async->select(e, &self->udp6, io::Ready::Read);
            e->ignore();
            async->select(e, &self->tcp4, io::Ready::Read);
            e->ignore();

            if self->statem.connecting.retry_sending == 2 {
                if io::valid(&self->tcp4) {
                    self->tcp4.close();
                }
                ip4addr.set_port(8443);
                tcp::connect(&self->tcp4, e, ip4addr, async);
                if err::check(e) {
                    return io::Result::Error;
                }
            }

            if io::valid(&self->tcp4) {
                static_attest(buffer::integrity(&self->statem.connecting.pkt_out));

                self->tcp4.send(e, self->statem.connecting.pkt_out.as_slice());
                e->ignore();
            }


            return io::Result::Later;
        }
        State::Connected => {
            return self->statem.connected.poll(e, async);
        }
        State::Closed => {
            log::debug("quitting time");
            return io::Result::Ready;
        }
        State::Invalid => {}
    }

    return io::Result::Later;
}
