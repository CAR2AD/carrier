using stream;
using identity;
using err;
using channel;
using endpoint;
using byteorder;
using hpack;
using log;
using slice;
using initiator;
using <stdlib.h>::{atoi};
using peering;
using <string.h>::{memcpy};
using hex;
using buffer;
using madpack;
using preshared;

export closure disconnect_t  (Connect mut *con, endpoint::Endpoint mut *ep);
export closure connect_t     (Connect mut *con, channel::Channel mut *chan);

export struct Connect {
    identity::Target        target;
    initiator::Initiator    initiator;
    u64                     initiator_time;
    buffer::Buffer+1024     mut initiator_pkt;
    disconnect_t            on_disconnect;
    connect_t               on_connect;


    buffer::Buffer+1024     mut remoteError;

    void mut *user1;
    usize mut user2;
}

static stream::Config ConnectStream = stream::Config {
    path:   "/carrier.broker.v2/broker/connect",
    stream: on_stream,
    close:  on_close,
};

export fn start(Connect mut new *self, err::Err mut*e, endpoint::Endpoint mut*ep, identity::Target *target)
    where err::checked(*e)
{
    memcpy(&self->target, target, sizeof(identity::Target));

    self->initiator_time = ep->vault.vector_time();

    buffer::make(&self->initiator_pkt);
    self->initiator.initiate(
        e,
        false,
        &ep->vault,
        initiator::Move::Never,
        0,
        0,
        self->initiator_time,
        self->initiator_pkt.as_mut_slice()
    );
    if err::check(e) { return; }


    stream::Stream mut* streami = ep->broker()->open(e, &ConnectStream);
    if err::check(e) { return; }
    static_attest(safe(streami));
    streami->user2 = self;
}

fn on_close(stream::Stream mut *self, err::Err mut*e) {

    log::warn("connect closed");

    static_attest(safe(self->chan));
    static_attest(safe(self->chan->endpoint));
    static_attest(safe(self->user2));
    Connect mut *this = self->user2;

    if this->on_disconnect.fn != 0 {
        static_attest(safe(this->on_disconnect));
        this->on_disconnect(this, self->chan->endpoint);
    }
}

fn on_stream(stream::Stream mut *self, err::Err mut*e, slice::Slice bs) -> bool
    where err::checked(*e)
    where slice::slice::integrity(&bs)
{


    static_attest(safe(self->chan));
    static_attest(safe(self->user2));
    Connect mut *this = self->user2;

    if self->state == 0 {
        int mut rcode = 0;
        new it = hpack::decoder::decode(bs);
        while it.next(e) {
            if it.key.eq_cstr(":status") {
                rcode = (int)atoi((char*)it.val.mem);
            }
        }
        if err::check(e) {
            self->close();
            return true;
        }
        if rcode != 200 {
            log::error("connect response");
            new it = hpack::decoder::decode(bs);
            while it.next(e) {
                log::error("  %.*s: %.*s", it.key.size, it.key.mem, it.val.size, it.val.mem);
            }
            self->close();
            return true;
        }

        static_attest(buffer::integrity(&this->initiator_pkt));
        let frame = self->stream(e, 100 + this->initiator_pkt.at);
        if err::check(e) {
            return false;
        }
        static_attest(frame.size > 8);
        self->state = 1;

        new+512 idx = madpack::from_preshared_index(e, preshared::connect());
        e->abort();

        new enc = madpack::encode(frame, &idx);


        char mut buf[128] = {0};
        if this->target.t == 11 {
            identity::alias_to_str(e, buf, static(len(buf)), (identity::Alias*)this->target.v);
        } else {
            identity::identity_to_str(e, buf, static(len(buf)), (identity::Identity*)this->target.v);
        }
        if err::check(e) {
            return false;
        }
        enc.kv_cstr(slice::from_cstr("target"), buf);
        enc.kv_uint(slice::from_cstr("timestamp"), this->initiator_time);
        enc.kv_uint(slice::from_cstr("timeout"), 5);
        enc.kv_byteslice(slice::from_cstr("handshake"), this->initiator_pkt.as_slice());

    } else if self->state == 1 {

        new+512 idx = madpack::from_preshared_index(e, preshared::connect());
        e->abort();

        peering::Peering mut peerings = {0};
        memcpy(&peerings, &self->chan->peering, sizeof(peering::Peering));

        slice::slice::Slice mut handshake = {0};
        u64 mut route = 0;
        new mad = madpack::decode(bs, &idx);

        while mad.next_kv(e) {
            static_attest(err::checked(*e));
            if mad.key.eq_cstr("error") && mad.item == madpack::Item::String{
                static_attest(slice::slice::integrity(&mad.value.v_slice));
                this->remoteError.make();
                this->remoteError.append_slice(mad.value.v_slice);
                log::error("error: %.*s", mad.value.v_slice.size, mad.value.v_slice.mem);
                self->close();
                return true;
            } else if mad.key.eq_cstr("handshake") && mad.item == madpack::Item::Bytes{
                handshake = mad.value.v_slice;
            } else if mad.key.eq_cstr("route") && mad.item == madpack::Item::Uint{
                route = byteorder::to_be64(mad.value.v_uint);
            } else if mad.key.eq_cstr("paths") && mad.item == madpack::Item::Array{
                peerings.from_madpack(e, &mad);
            } else {
                mad.skip(e);
            }
        }
        if err::check(e) {
            self->close();
            return true;
        }


        if handshake.mem == 0 || route == 0 {
            err::fail(e, err::InvalidArgument, "broker sent incomplete connectresponse");
            return true;
        }
        static_attest(len(handshake.mem) >= handshake.size);

        // unfortunate misdesign of tunneling an entire init packet
        // which actually contains no interesting information
        if handshake.size < 1 + 3 + 8 + 8 + 32 + 16 + 3 + 32 + 8 {
            err::fail(e, err::InvalidArgument, "too small");
            self->close();
            return true;
        }
        memcpy(this->initiator_pkt.mem, handshake.mem, handshake.size);
        this->initiator_pkt.at = handshake.size;


        endpoint::Endpoint mut * ep = self->chan->endpoint;
        err::assert_safe(ep);
        let nuchan = ep->statem.connected.next_channel();
        if nuchan == 0 {
            return false;
        }
        static_attest(safe(nuchan));

        channel::Transfer mut chan_trans = {0};
        static_attest(buffer::integrity(&this->initiator_pkt));
        identity::Identity * mut expect_identity = (identity::Identity *)&this->target;
        if this->target.t == 11 {
            expect_identity = 0;
        }
        this->initiator.complete(e, &chan_trans, 0, this->initiator_pkt.as_slice(), expect_identity);
        if err::check(e) {
            self->close();
            return true;
        }

        channel::from_transfer(nuchan, chan_trans);

        if nuchan->route != route {
            err::fail(e, err::InvalidArgument, "broker and peer disagree on route");
            nuchan->route = 0;
            self->close();
            return true;
        }

        self->broker_route = route;

        nuchan->q.allocator = self->chan->q.allocator;
        nuchan->store       = self->chan->store;
        nuchan->endpoint    = self->chan->endpoint;
        memcpy(&nuchan->peer,  &this->target, sizeof(identity::Identity));
        memcpy(&nuchan->peering, &peerings, sizeof(peering::Peering));

        if this->on_connect.fn != 0 {
            static_attest(safe(this->on_connect));
            this->on_connect(this, nuchan);
        }


        log::info("CONNECTED");
    }

    return true;
}

