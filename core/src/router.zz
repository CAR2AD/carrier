using identity;
using err;
using noise;
using hex;
using byteorder;
using <stdio.h>::{printf};
using <string.h>::{strlen, memset, memcpy};
using channel;
using buffer;
using io;
using net::address;
using netio::udp;
using netio::tcp;
using log;
using endpoint;
using publish;
using time;
using slice;
using peering;

export symbol OutOfOptions;

const usize MAX_CHANNELS = 6;

enum Direction {
    Initiator2Responder,
    Responder2Initiator,
}

export struct Router {
    usize                   mut tcp_expected;
    buffer::Buffer+1500     mut tcp_buf;

    udp::Socket             mut udp4;
    udp::Socket             mut udp6;
    tcp::Socket             mut tcp4;

    bool                    mut inshutdown;
    bool                    mut ded;
    io::Io                  mut shutdown_timeout;

    channel::Channel        mut channels[MAX_CHANNELS];
}

pub fn make(Router mut new* self) {
    self->tcp_buf.make();
}

pub fn shutdown(Router mut* self, err::Err mut*e)
    where err::checked(*e)
{
    self->inshutdown = true;
    for (usize mut j = 1; j < static(len(self->channels)); j++) {
        if self->channels[j].route == 0 {
            continue;
        }
        self->channels[j].shutdown(e);
        if err::check(e) {
            e->elog();
            e->ignore();
        }
    }
}

pub fn close(Router mut* self)
{
    self->udp4.close();
    self->udp6.close();
    self->tcp4.close();
    self->ded = true;
}

pub fn poll(Router mut*self, err::Err mut*e, io::Async mut* async) -> io::Result
    where err::checked(*e)
{
    if self->ded {
        return io::Result::Ready;
    }
    if self->inshutdown {
        if io::valid(&self->shutdown_timeout) {
            u8 mut buf[16];
            usize mut l = 16;
            io::Result rr = self->shutdown_timeout.read_bytes(e, buf, &l);
            if err::check(e) {
                e->elog();
                e->ignore();
            }
            if rr != io::Result::Later {
                self->close();
            }
        } else {
            //TODO we never actually send any shutdown packets, so we ALWAYS run into this timeout.
            // so it is set really low for now
            self->shutdown_timeout = io::timeout(async, e, time::from_millis(1000));
            if err::check(e) {
                e->ignore();
                self->close();
            }
            async->select(e, &self->shutdown_timeout, io::Ready::Read);
            if err::check(e) {
                e->ignore();
                self->close();
            }
        }

        bool mut all_closed = true;
        for (usize mut j = 1; j < static(len(self->channels)); j++) {
            if self->channels[j].route != 0 {
                all_closed = false;
            }
        }
        if all_closed {
            self->close();
        }
    }

    new+1500 pkt = buffer::make();

    if self->udp4.ctx.valid() {
        address::Address mut fromaddr = {0};
        if self->udp4.recvfrom(e, &pkt, &fromaddr) == io::Result::Ready {

            new+100 s = buffer::make();
            fromaddr.to_buffer(&s);
            log::debug("received from udp4: %s", s.cstr());


            e->ignore();
            if !self->push(e, pkt.as_slice()) {
                return io::Result::Error;
            }
        }
        if err::check(e) {
            e->elog();
            e->ignore();
        }
        pkt.clear();
    }

    if self->tcp4.ctx.valid() {
        switch self->tcp4.recv(e, &pkt) {
            io::Result::Eof => {
                self->tcp4.close();
            }
            io::Result::Ready => {
                log::debug("received from tcp4");
                e->ignore();
                for (usize mut i = 0; i < pkt.at; i++) {
                    if self->tcp_expected == 0 {
                        if i + 5 > pkt.at {
                            break;
                        }

                        if  pkt.mem[i] != 0x17 {
                            break;
                        }
                        self->tcp_expected = (usize)byteorder::from_be16(*(u16*)(pkt.mem + i + 3));

                        i += 4;
                        continue;
                    }
                    static_attest(i < len(pkt.mem));
                    static_attest(buffer::integrity(&self->tcp_buf));
                    self->tcp_buf.push(pkt.mem[i]);
                    if --self->tcp_expected == 0 {
                        if !self->push(e, self->tcp_buf.as_slice()) {
                            return io::Result::Error;
                        }
                        self->tcp_buf.clear();
                    }
                }
            }
        }
        if err::check(e) {
            e->elog();
            e->ignore();
        }
        pkt.clear();
    }


    bool mut again = true;
    while again {
        pkt.make();
        again = false;
        for (usize mut j = 0; j < static(len(self->channels)); j++) {
            if self->channels[j].route == 0 {
                continue;
            }
            //log::debug("polling chan %zu : %lu", j, self->channels[j].route);
            if self->channels[j].poll (e, async, &pkt) == io::Result::Ready {
                again = true;
                if err::check(e) { return io::Result::Error; }
                bool mut has_any_addr = false;
                for (usize mut i = 0; i < static(len(self->channels[j].peering.paths)); i++) {
                    if self->channels[j].peering.paths[i].active {

                        //TODO we dont currently settle p2p anyway, so we can just avoid the spam
                        if self->channels[j].peering.paths[i].klass == peering::Class::Local{
                            continue;
                        }


                        has_any_addr = true;

                        new+100 s = buffer::make();
                        self->channels[j].peering.paths[i].addr.to_buffer(&s);

                        switch self->channels[j].peering.paths[i].transport {
                            peering::Transport::Tcp => {
                                if io::valid(&self->tcp4) {
                                    log::debug("    sending %d bytes to tcp4:%s", pkt.at, s.cstr());

                                    new+5 mut header = buffer::make();
                                    let mut header_ms = header.as_mut_slice();
                                    header_ms.push(0x17);
                                    header_ms.push(0x03);
                                    header_ms.push(0x03);
                                    header_ms.push16(byteorder::to_be16(pkt.at));
                                    static_attest(buffer::integrity(&header));
                                    self->tcp4.send(e, header.as_slice());
                                    if err::check(e) { e->elog(); e->ignore(); }
                                    self->tcp4.send(e, pkt.as_slice());
                                    if err::check(e) { e->elog(); e->ignore(); }
                                }
                            }
                            peering::Transport::Udp => {
                                switch self->channels[j].peering.paths[i].addr.typ {
                                    address::Type::Invalid => {
                                    }
                                    address::Type::Ipv4 => {
                                        if io::valid(&self->udp4) {
                                            log::debug("    sending %d bytes to udp4:%s", pkt.at, s.cstr());
                                            self->udp4.sendto(e, pkt.as_slice(), &self->channels[j].peering.paths[i].addr);
                                            if err::check(e) {
                                                e->elog();
                                            }
                                            e->ignore();
                                        }
                                    }
                                    address::Type::Ipv6 => {
                                        if io::valid(&self->udp6) {
                                            log::debug("    sending %d bytes to udp6:%s", pkt.at, s.cstr());
                                            self->udp6.sendto(e, pkt.as_slice(), &self->channels[j].peering.paths[i].addr);
                                            e->ignore();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if !has_any_addr {
                    err::fail(e, OutOfOptions, "no addr to send to");
                }
            }
        }
    }

    if err::check(e) {
        return io::Result::Error;
    }

    return io::Result::Later;
}

pub fn push(Router mut* self, err::Err mut* e, slice::slice::Slice pkt) -> bool /*keep going*/
    where err::checked(*e)
    where slice::slice::integrity(&pkt)
{
    if pkt.size < 4 + 8 + 8 + 16   {
        err::fail(e, channel::InvalidFrame, "too small");
        return true;
    }

    // version 1B
    u8 version = pkt.mem[0];
    if version < 8 {
        err::fail(e, channel::InvalidFrame, "invalid version");
        return true;
    }
    // reserved 3B
    // route    8B
    u8 *rkeymem = (u8*)pkt.mem + 4;
    static_attest(safe(rkeymem));
    static_attest(len(rkeymem) > 8);
    u64 routingkey = read_routing_key(rkeymem, 0);
    // counter  8B
    u64 mut counter;
    memcpy(&counter, pkt.mem + 12, 8);
    counter = byteorder::from_be64(counter);



    usize mut at = 4 + 8 + 8;

    u8 mut * ciphertext     = (u8 mut*)pkt.mem + at;
    usize ciphertext_len    = pkt.size  - at;
    static_attest(safe(ciphertext));
    static_attest(len(ciphertext) >= ciphertext_len);

    if ciphertext_len <= 16 {
        err::fail(e, channel::InvalidFrame, "too small");
        return true;
    }

    for (usize mut i = 0; i < static(len(self->channels)); i++) {
        if self->channels[i].route == routingkey {
            channel::push(&self->channels[i], e, ciphertext, ciphertext_len, counter, version);
            if err::check(e) {
                if self->channels[i].errors_are_fatal {
                    return false;
                } else {
                    e->elog();
                    e->ignore();
                }
            }
            return true;
        }
    }
    log::debug("unroutable pkt. size: %zu, counter: %zu, route: %zu", (pkt).size , counter, routingkey);
    return true;
}


pub fn read_routing_key(u8 * i, Direction mut * unsafe direction) -> u64
    where len(i) >= 8
{
    if direction != 0 {
        static_attest(safe(direction));
        if (i[7] & 0b00000001) == 0 {
            *direction = Direction::Initiator2Responder;
        } else {
            *direction = Direction::Responder2Initiator;
        }
    }
    unsafe {
        u8 b[8] = {
            i[0],
            i[1],
            i[2],
            i[3],
            i[4],
            i[5],
            i[6],
            (i[7] & 0b11111110),
        };
        return *((u64*)b);
    }
}

pub fn next_channel(Router mut* self) -> channel::Channel mut * {
    for (usize mut i = 0; i < static(len(self->channels)); i++) {
        if self->channels[i].route == 0 {
            memset(self->channels + i, 0, sizeof(channel::Channel));
            return &self->channels[i];
        }
    }
    return 0;
}



export symbol Disconnected;

pub fn disconnect(Router mut* self, err::Err mut*e, u64 route)
    where err::checked(*e)
{
    for (usize mut i = 0; i < static(len(self->channels)); i++) {
        if self->channels[i].route == route {
            self->channels[i].cleanup(e);
            memset(&self->channels[i], 0, sizeof(channel::Channel));
            if i == 0 {
                err::fail(e, Disconnected, "broker channel closed");
            }
            if i != 0 {
                cleanup_dead_broker_route(&self->channels[0], route);
            }
        }
    }
}

fn cleanup_dead_broker_route(channel::Channel mut * chan, u64 dead_route)
{
    for (usize mut i = 0 ; i < static(len(chan->streams)); i++) {
        if chan->streams[i] == 0 {
            continue;
        }
        let strx = chan->streams[i];
        static_attest(safe(strx));
        if strx->broker_route == dead_route {
            strx->close();
        }
    }
}
