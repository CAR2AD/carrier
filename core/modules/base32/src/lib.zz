using <string.h>::{memcpy};
using err;

const char * ALPHABET   = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";

fn encode_base32_block(u8 * from, char mut* to)
    where len(from) >= 5
    where len(to)   >= 8
{
    u8 c1 = ((  from[0] & 0xf8) >> 3);
    u8 c2 = ((( from[0] & 0x07) << 2) | ((  from[1] & 0xc0) >> 6));
    u8 c3 = ((  from[1] & 0x3e) >> 1);
    u8 c4 = ((( from[1] & 0x01) << 4) | ((  from[2] & 0xf0) >> 4));
    u8 c5 = ((( from[2] & 0x0f) << 1) | (   from[3] >> 7));
    u8 c6 = ((  from[3] & 0x7c) >> 2);
    u8 c7 = ((( from[3] & 0x03) << 3) | ((  from[4] & 0xe0) >> 5));
    u8 c8 = (   from[4] & 0x1f);

    to[0] = unsafe<char>(ALPHABET[c1]);
    to[1] = unsafe<char>(ALPHABET[c2]);
    to[2] = unsafe<char>(ALPHABET[c3]);
    to[3] = unsafe<char>(ALPHABET[c4]);
    to[4] = unsafe<char>(ALPHABET[c5]);
    to[5] = unsafe<char>(ALPHABET[c6]);
    to[6] = unsafe<char>(ALPHABET[c7]);
    to[7] = unsafe<char>(ALPHABET[c8]);
}

export fn encode(err::Err mut*e, u8 *src, usize inlen, char mut* out, usize outlen) -> usize
    where err::checked(*e)
    where inlen   <= len(src)
    where outlen <= len(out)
{
    usize mut at_in  = 0;
    usize mut at_out = 0;

    for (;;) {
        usize size_left = inlen - at_in;
        if size_left  >= 5 {
            if at_out + 8 >= outlen  {
                err::fail(e, err::OutOfTail, "outbuf too small");
                return 0;
            }
            static_attest(at_out + 8 < len(out));
            encode_base32_block(src + at_in, out + at_out);
            at_in  += 5;
            at_out += 8;
        } else if size_left == 0{
            break;
        } else {
            u8 mut mi[5] = {0};
            memcpy(mi, unsafe<u8*>(src + at_in), size_left);
            if at_out + 8 >= outlen  {
                err::fail(e, err::OutOfTail, "outbuf too small");
                return 0;
            }
            static_attest(at_out < len(out));
            static_attest(at_out < len(out) + 8);
            encode_base32_block(mi, out + at_out);

            switch size_left {
                1 => {
                    out[at_out + 2] = 0;
                    unsafe { at_out += 2; };
                }
                2 => {
                    out[at_out + 4] = 0;
                    unsafe { at_out += 4; };
                }
                3 => {
                    out[at_out + 5] = 0;
                    unsafe { at_out += 5; };
                }
                4 => {
                    out[at_out + 7] = 0;
                    unsafe { at_out += 7; };
                }
            }
            break;
        }
    }

    return at_out;
}


export fn decode(err::Err mut*e, char *src, usize inlen, u8 mut* out, usize outlen) -> usize
    where err::checked(*e)
    where inlen   <= len(src)
    where outlen <= len(out)
{
    u8 LOOKUP[] = {-1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1, -1, 0, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};

    usize mut at_in  = 0;
    usize mut at_out = 0;

    for (;;) {
        usize size_left = inlen - at_in;
        if size_left == 0 {
            break;
        }
        u8 mut block[8] = {0};
        for (usize mut i = 0; i < 8 && i < size_left; i++) {
            usize lo = (usize)(src[at_in + i]) - (usize)('0');
            if lo >= static(len(LOOKUP)) {
                err::fail(e, err::InvalidArgument, "invalid base32 character: >%c<", src[at_in + i]);
                return 0;
            }
            block[i] = LOOKUP[(usize)lo];
        }

        if at_out + 4 >= outlen  {
            err::fail(e, err::OutOfTail, "outbuf too small to store %d bytes", at_out + 4);
            return 0;
        }

        out[at_out + 0] = (block[0] << 3) | (block[1] >> 2);
        out[at_out + 1] = (block[1] << 6) | (block[2] << 1) | (block[3] >> 4);
        out[at_out + 2] = (block[3] << 4) | (block[4] >> 1);
        out[at_out + 3] = (block[4] << 7) | (block[5] << 2) | (block[6] >> 3);
        out[at_out + 4] = (block[6] << 5) | block[7];

        at_in  += 8;
        at_out += 5;

        if size_left  <  8 {
            break;
        }
    }

    return inlen * 5 / 8;
}

