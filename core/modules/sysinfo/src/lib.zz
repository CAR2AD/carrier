using <stdio.h>::{printf, fopen, fclose, FILE};
using slice;
using buffer;
using err;
using hex;
using log;
using time;
using madpack;
using time;

inline using "os.h" as os;

export fn uname(madpack::Encoder mut *enc, err::Err mut *e)
    where err::checked(*e)
    where madpack::integrity(enc)
    if #(os::defined(os::__linux__))
{
    os::utsname_t mut name;
    if (os::uname(&name) != 0) {
        e->fail_with_errno("uname");
        return;
    }

    unsafe {
        madpack::kv_cstr(enc, slice::from_cstr("sysname"),   name.sysname);
        madpack::kv_cstr(enc, slice::from_cstr("nodename"),  name.nodename);
        madpack::kv_cstr(enc, slice::from_cstr("release"),   name.release);
        madpack::kv_cstr(enc, slice::from_cstr("version"),   name.version);
        madpack::kv_cstr(enc, slice::from_cstr("machine"),   name.machine);
    }

} else {
}

export fn mem(madpack::Encoder mut *enc, err::Err mut *e)
    where err::checked(*e)
    where madpack::integrity(enc)
    if #(os::defined(os::__linux__))
{
    os::sysinfo_t mut info;
    if (os::sysinfo(&info) != 0) {
        e->fail_with_errno("sysinfo");
        return;
    }

    madpack::kv_uint(enc, slice::from_cstr("total"),      (u64)unsafe<int>(info.totalram));
    madpack::kv_uint(enc, slice::from_cstr("free"),       (u64)unsafe<int>(info.freeram));
} else {
}




export fn cpu(madpack::Encoder mut *enc, err::Err mut *e)
    where err::checked(*e)
    where madpack::integrity(enc)
    if #(os::defined(os::__linux__))
{
    FILE mut *fi = fopen("/proc/loadavg", "r");
    if fi == 0 { e->fail_with_errno("cannot open /proc/loadavg"); return; };

    new+1000 b = buffer::make();
    b.fgets(fi);

    new+100 b1 = buffer::make();
    usize mut iterator = 0;
    if b.split(' ', &iterator, &b1) {
        enc->kv_cstr(slice::from_cstr("avg_1"), b1.mem);
    }
    if b.split(' ', &iterator, &b1) {
        enc->kv_cstr(slice::from_cstr("avg_5"), b1.mem);
    }
    if b.split(' ', &iterator, &b1) {
        enc->kv_cstr(slice::from_cstr("avg_15"), b1.mem);
    }
    if b.split(' ', &iterator, &b1) {
        new+100 b2 = buffer::make();
        usize mut iterator = 0;
        if b1.split('/', &iterator, &b2) {
            enc->kv_cstr(slice::from_cstr("proc_active"), b2.mem);
        }
        if b1.split('/', &iterator, &b2) {
            enc->kv_cstr(slice::from_cstr("proc_total"), b2.mem);
        }
    }

    fclose(fi);


    let t1 = time::real();
    enc->kv_uint(slice::from_cstr("clock"), t1.to_millis());
    let t2 = time::tick();
    enc->kv_uint(slice::from_cstr("uptime"), t2.to_millis());


    cores(enc, e);
} else {
}

export fn cores(madpack::Encoder mut *enc, err::Err mut *e)
    where err::checked(*e)
    where madpack::integrity(enc)
    if #(os::defined(os::__linux__) && !os::defined(os::__ANDROID__))
{
    enc->kv_uint(slice::from_cstr("threads"), os::get_nprocs());
} else {}


export fn firmware(madpack::Encoder mut *enc, err::Err mut *e)
    where err::checked(*e)
    where madpack::integrity(enc)
    if #(os::defined(os::__linux__) && !os::defined(os::__ANDROID__))
{
    FILE mut * mut fi = fopen("/etc/lsb-release", "r");
    if fi == 0 {
        fi = fopen("/etc/openwrt_release", "r");
        if fi == 0 { return; }
    }

    for (;;) {
        new+1000 b = buffer::make();
        if !b.fgets(fi) {
            break;
        }

        new+1000 k = buffer::make();
        new+1000 v = buffer::make();
        usize mut iterator = 0;
        if b.split('=', &iterator, &k) && b.split('=', &iterator, &v){
            if k.eq_cstr("DISTRIB_ID") && v.at > 1 {
                enc->kv_cstr(slice::from_cstr("distro"), clean(&v));
            } else if k.eq_cstr("DISTRIB_RELEASE") && v.at > 1 {
                enc->kv_cstr(slice::from_cstr("release"), clean(&v));
            } else if k.eq_cstr("DISTRIB_REVISION") && v.at > 1 {
                enc->kv_cstr(slice::from_cstr("revision"), clean(&v));
            } else if k.eq_cstr("DISTRIB_TARGET") && v.at > 1 {
                enc->kv_cstr(slice::from_cstr("board"), clean(&v));
            }
        }
    }


    fclose(fi);
    return;

} else {}




fn clean(buffer::Buffer mut*v) -> char *
    where buffer::integrity(v)
    where v->at > 1
    model safe(return)
    model nullterm(return)
{
    if v->mem[v->at - 1] == '\n' {
        v->mem[v->at - 1] = 0;
        unsafe { v->at -= 1; }
    }
    if v->mem[v->at - 1] == '"' ||  v->mem[v->at - 1] == '\''{
        v->mem[v->at - 1] = 0;
    }
    char * mut mm = v->mem;
    if mm[0] == '"' || mm[0] == '\'' {
        unsafe { mm = mm + 1; }
    }
    return mm;
}
