using <stdio.h>::{printf, stdin};
using <assert.h>::{assert};
using err;
using protonerf;
using hex;
using buffer;
using slice;


test {
    stdin = {0x23,0x22,0x22}
}


fn SimpleMessage(usize index) -> protonerf::FieldType{
    return protonerf::FieldType::Uint64;
}


pub fn main() -> int {
    new+1000 e = err::make();

    new+8 inp = buffer::make();
    inp.clear();
    inp.fgets(stdin);

    new+1000 buf = buffer::make();
    let mut sl = buf.as_mut_slice();


    u64 mut number = 0;
    unsafe {
        number = *(u64*)inp.mem;
    }

    protonerf::encode_varint(sl, &e, 1, number);
    e.abort();

    hex::dump_slice(buf.as_slice());


    new dec = protonerf::decode(buf.as_slice());
    for (protonerf::Field mut f = {0}; dec.next(&e, &f); ) {
        e.abort();
        assert(f.value.v_u64 == number);
    }

    return 0;
}
