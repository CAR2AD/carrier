syntax = "proto3";
package carrier.broker.v1;


message Path {
    enum Category {
        Invalid         = 0;
        Local           = 1;
        Internet        = 2;
        BrokerOrigin    = 3;
    }
    string ipaddr       = 1;
    Category category   = 2;
}


message SubscribeRequest {
    bytes   shadow      = 1;
    // filter = 2;
    bytes   group_identity  = 3;
    bytes   group_signature = 4;
}


message Publish {
    bytes   identity = 1;
    bytes   xaddr    = 2;
}

message Unpublish {
    bytes   identity = 1;
}

message Supersede {
}

message SubscribeChange{
    oneof m {
        Publish     publish = 1;
        Unpublish unpublish = 2;
        Supersede supersede = 3;
    }
}

message PublishRequest {
    bytes   xaddr    = 1;
    bytes   shadow   = 2;
}

message PublishChange{
    oneof m {
        Supersede supersede = 1;
    }
}

message ConnectRequest {
    bytes   target          = 1;
    uint64  timestamp       = 2;
    bytes   handshake       = 3;
    repeated Path paths     = 4;
    bytes   principal       = 5;
    uint32  timeout         = 6;
}

message ConnectResponse {
    bool    ok              = 1;
    bytes   handshake       = 2;
    uint64  route           = 3;
    repeated Path paths     = 4;
    string  error           = 5;
}


message ClusterNode {
}

message ClusterConfig {
    map<uint32, ClusterNode> nodes = 1;
    uint32 this = 2;
}

message ClusterChange {
}

service Broker {
    rpc subscribe   (SubscribeRequest)  returns (stream SubscribeChange) {}
    rpc publish     (PublishRequest)    returns (stream PublishChange)   {}
    rpc connect     (ConnectRequest)    returns (stream ConnectResponse) {}
    rpc cluster     (ClusterConfig)     returns (stream ClusterChange)   {}
}

message PeerConnectRequest {
    bytes   identity        = 1;
    uint64  timestamp       = 2;
    bytes   handshake       = 3;
    uint64  route           = 4;
    repeated Path paths     = 5;
}

message PeerConnectResponse {
    bool    ok              = 1;
    bytes   handshake       = 2;
    repeated Path paths     = 3;
    string error            = 4;
}

service Peer {
    rpc connect     (PeerConnectRequest)    returns (PeerConnectResponse)        {}
}

message ProtoHeader {
    uint64 len = 1;
}

message Empty {}


message MoveInstruction {
    string ipaddr = 1;
    bytes  xaddr  = 2;
}

